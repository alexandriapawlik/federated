
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:06:33.649557: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  31
2020-07-15 23:06:33.167597

How often each label is chosen for non-IID data
[21, 25, 23, 15, 22, 26, 16, 23, 13, 16]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.13766667246818542,loss=2.3022568225860596>
3.0382 seconds
Tested. Sparse categorical accuracy: 10.00

round  2, metrics=<sparse_categorical_accuracy=0.10533333569765091,loss=2.296881675720215>
2.1865 seconds
Tested. Sparse categorical accuracy: 25.00

round  3, metrics=<sparse_categorical_accuracy=0.12866666913032532,loss=2.2893128395080566>
2.2507 seconds
Tested. Sparse categorical accuracy: 51.67

round  4, metrics=<sparse_categorical_accuracy=0.16466666758060455,loss=2.2714834213256836>
2.1339 seconds
Tested. Sparse categorical accuracy: 31.67

round  5, metrics=<sparse_categorical_accuracy=0.2006666660308838,loss=2.238009452819824>
2.2219 seconds
Tested. Sparse categorical accuracy: 16.67

round  6, metrics=<sparse_categorical_accuracy=0.24833333492279053,loss=2.169872283935547>
2.1105 seconds
Tested. Sparse categorical accuracy: 38.33

round  7, metrics=<sparse_categorical_accuracy=0.4466666579246521,loss=2.331054449081421>
2.2162 seconds
Tested. Sparse categorical accuracy: 13.33

round  8, metrics=<sparse_categorical_accuracy=0.26233333349227905,loss=2.24202561378479>
2.0864 seconds
Tested. Sparse categorical accuracy: 43.33

round  9, metrics=<sparse_categorical_accuracy=0.398333340883255,loss=2.106519937515259>
2.0405 seconds
Tested. Sparse categorical accuracy: 55.00

round 10, metrics=<sparse_categorical_accuracy=0.49033331871032715,loss=1.9885681867599487>
2.2187 seconds
Tested. Sparse categorical accuracy: 73.33

round 11, metrics=<sparse_categorical_accuracy=0.5353333353996277,loss=1.6954203844070435>
2.0529 seconds
Tested. Sparse categorical accuracy: 76.67

round 12, metrics=<sparse_categorical_accuracy=0.6943333148956299,loss=1.2986767292022705>
2.1633 seconds
Tested. Sparse categorical accuracy: 61.67

round 13, metrics=<sparse_categorical_accuracy=0.684333324432373,loss=1.0921603441238403>
2.0415 seconds
Tested. Sparse categorical accuracy: 93.33

round 14, metrics=<sparse_categorical_accuracy=0.8103333115577698,loss=0.6793366074562073>
2.2080 seconds
Tested. Sparse categorical accuracy: 85.00

round 15, metrics=<sparse_categorical_accuracy=0.8386666774749756,loss=0.6030184030532837>
2.0369 seconds
Tested. Sparse categorical accuracy: 80.00

round 16, metrics=<sparse_categorical_accuracy=0.8453333377838135,loss=0.5697170495986938>
2.0715 seconds
Tested. Sparse categorical accuracy: 91.67

round 17, metrics=<sparse_categorical_accuracy=0.8316666483879089,loss=0.5739297866821289>
2.2061 seconds
Tested. Sparse categorical accuracy: 90.00

round 18, metrics=<sparse_categorical_accuracy=0.8870000243186951,loss=0.38974323868751526>
2.0879 seconds
Tested. Sparse categorical accuracy: 88.33

round 19, metrics=<sparse_categorical_accuracy=0.871999979019165,loss=0.4517677426338196>
2.1861 seconds
Tested. Sparse categorical accuracy: 85.00

round 20, metrics=<sparse_categorical_accuracy=0.890666663646698,loss=0.37207791209220886>
2.0559 seconds
Tested. Sparse categorical accuracy: 100.00

round 21, metrics=<sparse_categorical_accuracy=0.9150000214576721,loss=0.2773858308792114>
2.0404 seconds
Tested. Sparse categorical accuracy: 100.00

round 22, metrics=<sparse_categorical_accuracy=0.9176666736602783,loss=0.2791498601436615>
2.2229 seconds
Tested. Sparse categorical accuracy: 81.67

round 23, metrics=<sparse_categorical_accuracy=0.9066666960716248,loss=0.3093050420284271>
2.0634 seconds
Tested. Sparse categorical accuracy: 100.00

round 24, metrics=<sparse_categorical_accuracy=0.9353333115577698,loss=0.2417885959148407>
2.0758 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
