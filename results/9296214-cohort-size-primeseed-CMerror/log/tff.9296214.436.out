
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:48:04.622148: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  436
2020-07-15 23:48:04.137787

How often each label is chosen for non-IID data
[20, 19, 24, 22, 16, 21, 23, 15, 19, 21]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.10499999672174454,loss=2.3038039207458496>
2.8397 seconds
Tested. Sparse categorical accuracy: 10.00

round  2, metrics=<sparse_categorical_accuracy=0.08666666597127914,loss=2.296320915222168>
2.1426 seconds
Tested. Sparse categorical accuracy: 21.67

round  3, metrics=<sparse_categorical_accuracy=0.11633333563804626,loss=2.2917320728302>
2.2491 seconds
Tested. Sparse categorical accuracy: 8.33

round  4, metrics=<sparse_categorical_accuracy=0.11166666448116302,loss=2.2795305252075195>
2.0668 seconds
Tested. Sparse categorical accuracy: 31.67

round  5, metrics=<sparse_categorical_accuracy=0.1706666648387909,loss=2.250730276107788>
2.1781 seconds
Tested. Sparse categorical accuracy: 55.00

round  6, metrics=<sparse_categorical_accuracy=0.23999999463558197,loss=2.1859700679779053>
2.0301 seconds
Tested. Sparse categorical accuracy: 68.33

round  7, metrics=<sparse_categorical_accuracy=0.37933334708213806,loss=2.1553752422332764>
2.1724 seconds
Tested. Sparse categorical accuracy: 55.00

round  8, metrics=<sparse_categorical_accuracy=0.4493333399295807,loss=2.0064902305603027>
2.0575 seconds
Tested. Sparse categorical accuracy: 58.33

round  9, metrics=<sparse_categorical_accuracy=0.4726666808128357,loss=1.972926139831543>
2.0481 seconds
Tested. Sparse categorical accuracy: 48.33

round 10, metrics=<sparse_categorical_accuracy=0.476666659116745,loss=1.6792978048324585>
2.1063 seconds
Tested. Sparse categorical accuracy: 71.67

round 11, metrics=<sparse_categorical_accuracy=0.5933333039283752,loss=1.5274832248687744>
2.0281 seconds
Tested. Sparse categorical accuracy: 60.00

round 12, metrics=<sparse_categorical_accuracy=0.6629999876022339,loss=1.0970622301101685>
2.1332 seconds
Tested. Sparse categorical accuracy: 80.00

round 13, metrics=<sparse_categorical_accuracy=0.7363333106040955,loss=0.9572410583496094>
2.0582 seconds
Tested. Sparse categorical accuracy: 80.00

round 14, metrics=<sparse_categorical_accuracy=0.7829999923706055,loss=0.6819018721580505>
2.1750 seconds
Tested. Sparse categorical accuracy: 75.00

round 15, metrics=<sparse_categorical_accuracy=0.815666675567627,loss=0.6980214715003967>
2.0059 seconds
Tested. Sparse categorical accuracy: 83.33

round 16, metrics=<sparse_categorical_accuracy=0.8546666502952576,loss=0.4617646336555481>
1.9669 seconds
Tested. Sparse categorical accuracy: 85.00

round 17, metrics=<sparse_categorical_accuracy=0.8736666440963745,loss=0.4318469166755676>
2.1370 seconds
Tested. Sparse categorical accuracy: 96.67

round 18, metrics=<sparse_categorical_accuracy=0.8970000147819519,loss=0.36911699175834656>
2.0085 seconds
Tested. Sparse categorical accuracy: 90.00

round 19, metrics=<sparse_categorical_accuracy=0.8606666922569275,loss=0.4594857096672058>
2.0144 seconds
Tested. Sparse categorical accuracy: 88.33

round 20, metrics=<sparse_categorical_accuracy=0.9113333225250244,loss=0.29743584990501404>
2.1393 seconds
Tested. Sparse categorical accuracy: 93.33

round 21, metrics=<sparse_categorical_accuracy=0.9076666831970215,loss=0.29363176226615906>
2.0237 seconds
Tested. Sparse categorical accuracy: 83.33

round 22, metrics=<sparse_categorical_accuracy=0.8999999761581421,loss=0.35066425800323486>
2.1052 seconds
Tested. Sparse categorical accuracy: 96.67

round 23, metrics=<sparse_categorical_accuracy=0.9363333582878113,loss=0.23206573724746704>
2.0118 seconds
Tested. Sparse categorical accuracy: 96.67

round 24, metrics=<sparse_categorical_accuracy=0.9350000023841858,loss=0.22345061600208282>
2.0402 seconds
Tested. Sparse categorical accuracy: 100.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
