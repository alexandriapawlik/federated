
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:05:26.946470: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  21
2020-07-15 23:05:26.465375

How often each label is chosen for non-IID data
[22, 19, 16, 17, 18, 27, 17, 22, 22, 20]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.10633333027362823,loss=2.3044240474700928>
3.5364 seconds
Tested. Sparse categorical accuracy: 18.33

round  2, metrics=<sparse_categorical_accuracy=0.09600000083446503,loss=2.297320604324341>
2.8643 seconds
Tested. Sparse categorical accuracy: 20.00

round  3, metrics=<sparse_categorical_accuracy=0.12866666913032532,loss=2.2846639156341553>
2.9816 seconds
Tested. Sparse categorical accuracy: 10.00

round  4, metrics=<sparse_categorical_accuracy=0.10533333569765091,loss=2.264543056488037>
2.8610 seconds
Tested. Sparse categorical accuracy: 36.67

round  5, metrics=<sparse_categorical_accuracy=0.1626666635274887,loss=2.22248911857605>
3.0505 seconds
Tested. Sparse categorical accuracy: 33.33

round  6, metrics=<sparse_categorical_accuracy=0.2213333398103714,loss=2.1090335845947266>
2.8758 seconds
Tested. Sparse categorical accuracy: 70.00

round  7, metrics=<sparse_categorical_accuracy=0.3866666555404663,loss=2.1990344524383545>
2.7895 seconds
Tested. Sparse categorical accuracy: 55.00

round  8, metrics=<sparse_categorical_accuracy=0.4963333308696747,loss=1.790917158126831>
2.7332 seconds
Tested. Sparse categorical accuracy: 83.33

round  9, metrics=<sparse_categorical_accuracy=0.3630000054836273,loss=2.5952746868133545>
2.9237 seconds
Tested. Sparse categorical accuracy: 16.67

round 10, metrics=<sparse_categorical_accuracy=0.35899999737739563,loss=2.1895511150360107>
3.0435 seconds
Tested. Sparse categorical accuracy: 48.33

round 11, metrics=<sparse_categorical_accuracy=0.45899999141693115,loss=1.868198275566101>
2.9397 seconds
Tested. Sparse categorical accuracy: 65.00

round 12, metrics=<sparse_categorical_accuracy=0.6179999709129333,loss=1.4396638870239258>
3.0125 seconds
Tested. Sparse categorical accuracy: 73.33

round 13, metrics=<sparse_categorical_accuracy=0.6449999809265137,loss=1.1652690172195435>
2.8956 seconds
Tested. Sparse categorical accuracy: 78.33

round 14, metrics=<sparse_categorical_accuracy=0.7559999823570251,loss=0.897803783416748>
3.1212 seconds
Tested. Sparse categorical accuracy: 83.33

round 15, metrics=<sparse_categorical_accuracy=0.8133333325386047,loss=0.6708173751831055>
2.6815 seconds
Tested. Sparse categorical accuracy: 85.00

round 16, metrics=<sparse_categorical_accuracy=0.8446666598320007,loss=0.5618532299995422>
3.1249 seconds
Tested. Sparse categorical accuracy: 93.33

round 17, metrics=<sparse_categorical_accuracy=0.828000009059906,loss=0.6035197973251343>
3.0456 seconds
Tested. Sparse categorical accuracy: 91.67

round 18, metrics=<sparse_categorical_accuracy=0.8539999723434448,loss=0.5126253366470337>
2.6819 seconds
Tested. Sparse categorical accuracy: 96.67

round 19, metrics=<sparse_categorical_accuracy=0.8793333172798157,loss=0.418334037065506>
2.9223 seconds
Tested. Sparse categorical accuracy: 91.67

round 20, metrics=<sparse_categorical_accuracy=0.8853333592414856,loss=0.37548303604125977>
2.6952 seconds
Tested. Sparse categorical accuracy: 90.00

round 21, metrics=<sparse_categorical_accuracy=0.9150000214576721,loss=0.29561111330986023>
2.8462 seconds
Tested. Sparse categorical accuracy: 91.67

round 22, metrics=<sparse_categorical_accuracy=0.8999999761581421,loss=0.3400327265262604>
2.5097 seconds
Tested. Sparse categorical accuracy: 100.00

round 23, metrics=<sparse_categorical_accuracy=0.9190000295639038,loss=0.27414482831954956>
3.3500 seconds
Tested. Sparse categorical accuracy: 98.33

round 24, metrics=<sparse_categorical_accuracy=0.92166668176651,loss=0.2477821707725525>
2.8462 seconds
Tested. Sparse categorical accuracy: 100.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
