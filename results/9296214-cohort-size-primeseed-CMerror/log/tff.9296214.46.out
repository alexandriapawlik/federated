
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:07:52.587321: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  46
2020-07-15 23:07:52.103504

How often each label is chosen for non-IID data
[18, 25, 21, 16, 20, 20, 20, 20, 15, 25]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.14033333957195282,loss=2.303011178970337>
3.1764 seconds
Tested. Sparse categorical accuracy: 18.33

round  2, metrics=<sparse_categorical_accuracy=0.14000000059604645,loss=2.294355869293213>
2.2547 seconds
Tested. Sparse categorical accuracy: 5.00

round  3, metrics=<sparse_categorical_accuracy=0.12066666781902313,loss=2.2710154056549072>
2.3008 seconds
Tested. Sparse categorical accuracy: 16.67

round  4, metrics=<sparse_categorical_accuracy=0.10966666787862778,loss=2.242924690246582>
2.1990 seconds
Tested. Sparse categorical accuracy: 55.00

round  5, metrics=<sparse_categorical_accuracy=0.29899999499320984,loss=2.197834014892578>
2.2886 seconds
Tested. Sparse categorical accuracy: 60.00

round  6, metrics=<sparse_categorical_accuracy=0.3893333375453949,loss=2.2994112968444824>
2.1665 seconds
Tested. Sparse categorical accuracy: 38.33

round  7, metrics=<sparse_categorical_accuracy=0.367000013589859,loss=2.1422457695007324>
2.3192 seconds
Tested. Sparse categorical accuracy: 36.67

round  8, metrics=<sparse_categorical_accuracy=0.4506666660308838,loss=2.1599578857421875>
2.1785 seconds
Tested. Sparse categorical accuracy: 50.00

round  9, metrics=<sparse_categorical_accuracy=0.41100001335144043,loss=1.8903881311416626>
2.2673 seconds
Tested. Sparse categorical accuracy: 76.67

round 10, metrics=<sparse_categorical_accuracy=0.5099999904632568,loss=1.9164001941680908>
2.1812 seconds
Tested. Sparse categorical accuracy: 60.00

round 11, metrics=<sparse_categorical_accuracy=0.5580000281333923,loss=1.6719756126403809>
2.1497 seconds
Tested. Sparse categorical accuracy: 50.00

round 12, metrics=<sparse_categorical_accuracy=0.637666642665863,loss=1.2418897151947021>
2.2271 seconds
Tested. Sparse categorical accuracy: 80.00

round 13, metrics=<sparse_categorical_accuracy=0.7093333601951599,loss=1.1052939891815186>
2.1323 seconds
Tested. Sparse categorical accuracy: 63.33

round 14, metrics=<sparse_categorical_accuracy=0.7536666393280029,loss=0.7707335352897644>
2.2799 seconds
Tested. Sparse categorical accuracy: 85.00

round 15, metrics=<sparse_categorical_accuracy=0.8286666870117188,loss=0.6127344369888306>
2.1302 seconds
Tested. Sparse categorical accuracy: 70.00

round 16, metrics=<sparse_categorical_accuracy=0.7853333353996277,loss=0.6844239830970764>
2.1183 seconds
Tested. Sparse categorical accuracy: 91.67

round 17, metrics=<sparse_categorical_accuracy=0.7923333048820496,loss=0.7926626205444336>
2.2926 seconds
Tested. Sparse categorical accuracy: 90.00

round 18, metrics=<sparse_categorical_accuracy=0.8713333606719971,loss=0.44862625002861023>
2.1084 seconds
Tested. Sparse categorical accuracy: 93.33

round 19, metrics=<sparse_categorical_accuracy=0.9110000133514404,loss=0.3287573754787445>
2.2578 seconds
Tested. Sparse categorical accuracy: 86.67

round 20, metrics=<sparse_categorical_accuracy=0.9076666831970215,loss=0.31241655349731445>
2.1206 seconds
Tested. Sparse categorical accuracy: 91.67

round 21, metrics=<sparse_categorical_accuracy=0.9110000133514404,loss=0.2991556227207184>
2.0969 seconds
Tested. Sparse categorical accuracy: 95.00

round 22, metrics=<sparse_categorical_accuracy=0.9116666913032532,loss=0.2851158082485199>
2.2825 seconds
Tested. Sparse categorical accuracy: 96.67

round 23, metrics=<sparse_categorical_accuracy=0.8723333477973938,loss=0.4341820776462555>
2.2011 seconds
Tested. Sparse categorical accuracy: 86.67

round 24, metrics=<sparse_categorical_accuracy=0.9259999990463257,loss=0.2426496148109436>
2.0819 seconds
Tested. Sparse categorical accuracy: 86.67

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
