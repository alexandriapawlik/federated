
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:26:16.463058: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  231
2020-07-15 23:26:15.978792

How often each label is chosen for non-IID data
[21, 19, 16, 26, 9, 23, 22, 21, 22, 21]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.09600000083446503,loss=2.3028500080108643>
2.8409 seconds
Tested. Sparse categorical accuracy: 16.67

round  2, metrics=<sparse_categorical_accuracy=0.12600000202655792,loss=2.2963531017303467>
2.1584 seconds
Tested. Sparse categorical accuracy: 5.00

round  3, metrics=<sparse_categorical_accuracy=0.0976666659116745,loss=2.286959409713745>
2.2003 seconds
Tested. Sparse categorical accuracy: 35.00

round  4, metrics=<sparse_categorical_accuracy=0.2356666624546051,loss=2.2511520385742188>
2.1373 seconds
Tested. Sparse categorical accuracy: 20.00

round  5, metrics=<sparse_categorical_accuracy=0.2529999911785126,loss=2.2207021713256836>
2.2021 seconds
Tested. Sparse categorical accuracy: 68.33

round  6, metrics=<sparse_categorical_accuracy=0.5130000114440918,loss=2.1840124130249023>
2.0805 seconds
Tested. Sparse categorical accuracy: 43.33

round  7, metrics=<sparse_categorical_accuracy=0.41499999165534973,loss=2.0422632694244385>
2.1793 seconds
Tested. Sparse categorical accuracy: 35.00

round  8, metrics=<sparse_categorical_accuracy=0.44200000166893005,loss=2.361229419708252>
2.0367 seconds
Tested. Sparse categorical accuracy: 18.33

round  9, metrics=<sparse_categorical_accuracy=0.33500000834465027,loss=2.184044361114502>
2.1450 seconds
Tested. Sparse categorical accuracy: 41.67

round 10, metrics=<sparse_categorical_accuracy=0.4803333282470703,loss=1.9008173942565918>
2.0149 seconds
Tested. Sparse categorical accuracy: 55.00

round 11, metrics=<sparse_categorical_accuracy=0.5883333086967468,loss=1.473636507987976>
2.0907 seconds
Tested. Sparse categorical accuracy: 65.00

round 12, metrics=<sparse_categorical_accuracy=0.6543333530426025,loss=1.1328366994857788>
2.0017 seconds
Tested. Sparse categorical accuracy: 81.67

round 13, metrics=<sparse_categorical_accuracy=0.7283333539962769,loss=1.066066861152649>
1.9928 seconds
Tested. Sparse categorical accuracy: 63.33

round 14, metrics=<sparse_categorical_accuracy=0.6956666707992554,loss=0.9740854501724243>
2.1335 seconds
Tested. Sparse categorical accuracy: 68.33

round 15, metrics=<sparse_categorical_accuracy=0.8036666512489319,loss=0.6979361772537231>
2.0031 seconds
Tested. Sparse categorical accuracy: 80.00

round 16, metrics=<sparse_categorical_accuracy=0.7990000247955322,loss=0.7409529685974121>
2.1610 seconds
Tested. Sparse categorical accuracy: 93.33

round 17, metrics=<sparse_categorical_accuracy=0.8389999866485596,loss=0.5292813777923584>
1.9937 seconds
Tested. Sparse categorical accuracy: 76.67

round 18, metrics=<sparse_categorical_accuracy=0.8923333287239075,loss=0.4069480001926422>
2.0072 seconds
Tested. Sparse categorical accuracy: 83.33

round 19, metrics=<sparse_categorical_accuracy=0.8963333368301392,loss=0.3779354691505432>
2.1356 seconds
Tested. Sparse categorical accuracy: 85.00

round 20, metrics=<sparse_categorical_accuracy=0.9123333096504211,loss=0.31696751713752747>
1.9825 seconds
Tested. Sparse categorical accuracy: 100.00

round 21, metrics=<sparse_categorical_accuracy=0.909333348274231,loss=0.3069267272949219>
1.9928 seconds
Tested. Sparse categorical accuracy: 93.33

round 22, metrics=<sparse_categorical_accuracy=0.9129999876022339,loss=0.2853279113769531>
2.1955 seconds
Tested. Sparse categorical accuracy: 83.33

round 23, metrics=<sparse_categorical_accuracy=0.9039999842643738,loss=0.3128100037574768>
2.0011 seconds
Tested. Sparse categorical accuracy: 91.67

round 24, metrics=<sparse_categorical_accuracy=0.92166668176651,loss=0.2545117139816284>
1.9847 seconds
Tested. Sparse categorical accuracy: 93.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
