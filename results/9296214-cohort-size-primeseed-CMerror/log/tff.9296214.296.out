
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:33:14.084634: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  296
2020-07-15 23:33:13.595634

How often each label is chosen for non-IID data
[23, 20, 22, 14, 21, 25, 18, 14, 21, 22]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.10899999737739563,loss=2.3008503913879395>
3.0366 seconds
Tested. Sparse categorical accuracy: 6.67

round  2, metrics=<sparse_categorical_accuracy=0.11433333158493042,loss=2.2918834686279297>
2.2177 seconds
Tested. Sparse categorical accuracy: 11.67

round  3, metrics=<sparse_categorical_accuracy=0.12600000202655792,loss=2.2708258628845215>
2.2728 seconds
Tested. Sparse categorical accuracy: 23.33

round  4, metrics=<sparse_categorical_accuracy=0.15833333134651184,loss=2.238152027130127>
2.1489 seconds
Tested. Sparse categorical accuracy: 58.33

round  5, metrics=<sparse_categorical_accuracy=0.30799999833106995,loss=2.1949172019958496>
2.2258 seconds
Tested. Sparse categorical accuracy: 45.00

round  6, metrics=<sparse_categorical_accuracy=0.3803333342075348,loss=2.053450345993042>
2.0786 seconds
Tested. Sparse categorical accuracy: 53.33

round  7, metrics=<sparse_categorical_accuracy=0.39133334159851074,loss=2.16601300239563>
2.2060 seconds
Tested. Sparse categorical accuracy: 46.67

round  8, metrics=<sparse_categorical_accuracy=0.460999995470047,loss=1.7559069395065308>
2.0646 seconds
Tested. Sparse categorical accuracy: 55.00

round  9, metrics=<sparse_categorical_accuracy=0.49266666173934937,loss=2.128424882888794>
2.2844 seconds
Tested. Sparse categorical accuracy: 60.00

round 10, metrics=<sparse_categorical_accuracy=0.5103333592414856,loss=1.6099674701690674>
2.0749 seconds
Tested. Sparse categorical accuracy: 71.67

round 11, metrics=<sparse_categorical_accuracy=0.6840000152587891,loss=1.0880377292633057>
2.2197 seconds
Tested. Sparse categorical accuracy: 76.67

round 12, metrics=<sparse_categorical_accuracy=0.6666666865348816,loss=1.0136650800704956>
2.1496 seconds
Tested. Sparse categorical accuracy: 80.00

round 13, metrics=<sparse_categorical_accuracy=0.781333327293396,loss=0.7839053273200989>
2.0291 seconds
Tested. Sparse categorical accuracy: 76.67

round 14, metrics=<sparse_categorical_accuracy=0.7463333606719971,loss=0.8471080660820007>
2.2152 seconds
Tested. Sparse categorical accuracy: 85.00

round 15, metrics=<sparse_categorical_accuracy=0.8500000238418579,loss=0.5430023670196533>
2.0608 seconds
Tested. Sparse categorical accuracy: 93.33

round 16, metrics=<sparse_categorical_accuracy=0.8646666407585144,loss=0.4845656752586365>
2.2286 seconds
Tested. Sparse categorical accuracy: 83.33

round 17, metrics=<sparse_categorical_accuracy=0.8896666765213013,loss=0.4068807363510132>
2.0895 seconds
Tested. Sparse categorical accuracy: 91.67

round 18, metrics=<sparse_categorical_accuracy=0.8793333172798157,loss=0.4141571521759033>
2.0702 seconds
Tested. Sparse categorical accuracy: 85.00

round 19, metrics=<sparse_categorical_accuracy=0.9020000100135803,loss=0.35180139541625977>
2.2472 seconds
Tested. Sparse categorical accuracy: 91.67

round 20, metrics=<sparse_categorical_accuracy=0.9016666412353516,loss=0.3385780155658722>
2.0033 seconds
Tested. Sparse categorical accuracy: 98.33

round 21, metrics=<sparse_categorical_accuracy=0.906333327293396,loss=0.2967694103717804>
2.0756 seconds
Tested. Sparse categorical accuracy: 91.67

round 22, metrics=<sparse_categorical_accuracy=0.9153333306312561,loss=0.2810499370098114>
2.2477 seconds
Tested. Sparse categorical accuracy: 98.33

round 23, metrics=<sparse_categorical_accuracy=0.921999990940094,loss=0.255621999502182>
2.0354 seconds
Tested. Sparse categorical accuracy: 95.00

round 24, metrics=<sparse_categorical_accuracy=0.9306666851043701,loss=0.22327417135238647>
2.1068 seconds
Tested. Sparse categorical accuracy: 91.67

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
