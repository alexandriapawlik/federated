
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:41:40.808206: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  376
2020-07-15 23:41:40.316213

How often each label is chosen for non-IID data
[18, 18, 22, 16, 15, 22, 23, 26, 22, 18]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.1223333328962326,loss=2.3050765991210938>
3.0764 seconds
Tested. Sparse categorical accuracy: 13.33

round  2, metrics=<sparse_categorical_accuracy=0.09866666793823242,loss=2.296963930130005>
2.1916 seconds
Tested. Sparse categorical accuracy: 15.00

round  3, metrics=<sparse_categorical_accuracy=0.08233333379030228,loss=2.2921860218048096>
2.3378 seconds
Tested. Sparse categorical accuracy: 40.00

round  4, metrics=<sparse_categorical_accuracy=0.17266666889190674,loss=2.263334274291992>
2.1673 seconds
Tested. Sparse categorical accuracy: 6.67

round  5, metrics=<sparse_categorical_accuracy=0.10233332961797714,loss=2.2298402786254883>
2.3246 seconds
Tested. Sparse categorical accuracy: 33.33

round  6, metrics=<sparse_categorical_accuracy=0.3453333377838135,loss=2.113903760910034>
2.1374 seconds
Tested. Sparse categorical accuracy: 65.00

round  7, metrics=<sparse_categorical_accuracy=0.2836666703224182,loss=2.4932711124420166>
2.2559 seconds
Tested. Sparse categorical accuracy: 13.33

round  8, metrics=<sparse_categorical_accuracy=0.17466667294502258,loss=2.244965076446533>
2.1207 seconds
Tested. Sparse categorical accuracy: 23.33

round  9, metrics=<sparse_categorical_accuracy=0.3153333365917206,loss=2.1184163093566895>
2.2365 seconds
Tested. Sparse categorical accuracy: 46.67

round 10, metrics=<sparse_categorical_accuracy=0.4113333225250244,loss=1.9931631088256836>
2.0901 seconds
Tested. Sparse categorical accuracy: 40.00

round 11, metrics=<sparse_categorical_accuracy=0.4976666569709778,loss=1.6414929628372192>
2.2014 seconds
Tested. Sparse categorical accuracy: 80.00

round 12, metrics=<sparse_categorical_accuracy=0.5383333563804626,loss=1.6759424209594727>
2.0722 seconds
Tested. Sparse categorical accuracy: 63.33

round 13, metrics=<sparse_categorical_accuracy=0.6456666588783264,loss=1.2175129652023315>
2.0888 seconds
Tested. Sparse categorical accuracy: 68.33

round 14, metrics=<sparse_categorical_accuracy=0.6840000152587891,loss=1.0724616050720215>
2.1897 seconds
Tested. Sparse categorical accuracy: 81.67

round 15, metrics=<sparse_categorical_accuracy=0.7413333058357239,loss=0.8244807124137878>
2.0251 seconds
Tested. Sparse categorical accuracy: 83.33

round 16, metrics=<sparse_categorical_accuracy=0.7850000262260437,loss=0.743517279624939>
2.2265 seconds
Tested. Sparse categorical accuracy: 88.33

round 17, metrics=<sparse_categorical_accuracy=0.828000009059906,loss=0.6271904110908508>
2.0485 seconds
Tested. Sparse categorical accuracy: 96.67

round 18, metrics=<sparse_categorical_accuracy=0.8463333249092102,loss=0.5233696103096008>
2.0749 seconds
Tested. Sparse categorical accuracy: 88.33

round 19, metrics=<sparse_categorical_accuracy=0.8849999904632568,loss=0.38405272364616394>
2.1879 seconds
Tested. Sparse categorical accuracy: 98.33

round 20, metrics=<sparse_categorical_accuracy=0.8849999904632568,loss=0.36579015851020813>
2.0912 seconds
Tested. Sparse categorical accuracy: 83.33

round 21, metrics=<sparse_categorical_accuracy=0.9053333401679993,loss=0.31787481904029846>
2.0507 seconds
Tested. Sparse categorical accuracy: 90.00

round 22, metrics=<sparse_categorical_accuracy=0.9146666526794434,loss=0.2945669889450073>
2.2494 seconds
Tested. Sparse categorical accuracy: 95.00

round 23, metrics=<sparse_categorical_accuracy=0.9179999828338623,loss=0.27384138107299805>
2.1253 seconds
Tested. Sparse categorical accuracy: 93.33

round 24, metrics=<sparse_categorical_accuracy=0.9196666479110718,loss=0.26477962732315063>
2.1181 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
