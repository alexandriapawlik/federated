
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:14:27.946772: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  111
2020-07-15 23:14:27.441779

How often each label is chosen for non-IID data
[18, 33, 22, 23, 20, 13, 17, 22, 17, 15]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.11166666448116302,loss=2.3015530109405518>
4.2763 seconds
Tested. Sparse categorical accuracy: 10.00

round  2, metrics=<sparse_categorical_accuracy=0.10599999874830246,loss=2.2929351329803467>
3.0250 seconds
Tested. Sparse categorical accuracy: 45.00

round  3, metrics=<sparse_categorical_accuracy=0.2446666657924652,loss=2.2698771953582764>
3.2999 seconds
Tested. Sparse categorical accuracy: 41.67

round  4, metrics=<sparse_categorical_accuracy=0.2526666522026062,loss=2.224011182785034>
3.0138 seconds
Tested. Sparse categorical accuracy: 18.33

round  5, metrics=<sparse_categorical_accuracy=0.28566667437553406,loss=2.180666208267212>
3.2300 seconds
Tested. Sparse categorical accuracy: 70.00

round  6, metrics=<sparse_categorical_accuracy=0.37933334708213806,loss=2.2697746753692627>
3.2760 seconds
Tested. Sparse categorical accuracy: 15.00

round  7, metrics=<sparse_categorical_accuracy=0.26766666769981384,loss=2.1171627044677734>
2.9860 seconds
Tested. Sparse categorical accuracy: 45.00

round  8, metrics=<sparse_categorical_accuracy=0.36500000953674316,loss=2.0188255310058594>
2.9750 seconds
Tested. Sparse categorical accuracy: 38.33

round  9, metrics=<sparse_categorical_accuracy=0.4806666672229767,loss=1.8584860563278198>
3.1074 seconds
Tested. Sparse categorical accuracy: 51.67

round 10, metrics=<sparse_categorical_accuracy=0.5526666641235352,loss=1.4418351650238037>
2.9609 seconds
Tested. Sparse categorical accuracy: 55.00

round 11, metrics=<sparse_categorical_accuracy=0.6006666421890259,loss=1.3480757474899292>
3.1982 seconds
Tested. Sparse categorical accuracy: 68.33

round 12, metrics=<sparse_categorical_accuracy=0.7076666951179504,loss=0.9299029111862183>
2.9223 seconds
Tested. Sparse categorical accuracy: 68.33

round 13, metrics=<sparse_categorical_accuracy=0.7353333234786987,loss=0.8668742775917053>
3.0380 seconds
Tested. Sparse categorical accuracy: 75.00

round 14, metrics=<sparse_categorical_accuracy=0.8013333082199097,loss=0.6423538327217102>
3.3003 seconds
Tested. Sparse categorical accuracy: 91.67

round 15, metrics=<sparse_categorical_accuracy=0.8333333134651184,loss=0.5724329352378845>
2.7617 seconds
Tested. Sparse categorical accuracy: 83.33

round 16, metrics=<sparse_categorical_accuracy=0.7723333239555359,loss=0.753385603427887>
2.9748 seconds
Tested. Sparse categorical accuracy: 88.33

round 17, metrics=<sparse_categorical_accuracy=0.8733333349227905,loss=0.4557715952396393>
2.6666 seconds
Tested. Sparse categorical accuracy: 83.33

round 18, metrics=<sparse_categorical_accuracy=0.875,loss=0.45721304416656494>
2.7539 seconds
Tested. Sparse categorical accuracy: 96.67

round 19, metrics=<sparse_categorical_accuracy=0.8989999890327454,loss=0.35668477416038513>
3.2900 seconds
Tested. Sparse categorical accuracy: 96.67

round 20, metrics=<sparse_categorical_accuracy=0.9160000085830688,loss=0.2687162160873413>
2.8622 seconds
Tested. Sparse categorical accuracy: 95.00

round 21, metrics=<sparse_categorical_accuracy=0.9089999794960022,loss=0.30228570103645325>
2.7263 seconds
Tested. Sparse categorical accuracy: 98.33

round 22, metrics=<sparse_categorical_accuracy=0.909333348274231,loss=0.2928628623485565>
3.0797 seconds
Tested. Sparse categorical accuracy: 95.00

round 23, metrics=<sparse_categorical_accuracy=0.9273333549499512,loss=0.2565390169620514>
2.8005 seconds
Tested. Sparse categorical accuracy: 86.67

round 24, metrics=<sparse_categorical_accuracy=0.9139999747276306,loss=0.27375975251197815>
2.8834 seconds
Tested. Sparse categorical accuracy: 83.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
