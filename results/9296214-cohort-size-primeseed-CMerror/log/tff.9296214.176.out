
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:20:40.940314: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  176
2020-07-15 23:20:40.442282

How often each label is chosen for non-IID data
[18, 21, 15, 23, 20, 21, 23, 13, 24, 22]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.0976666659116745,loss=2.302077531814575>
3.0699 seconds
Tested. Sparse categorical accuracy: 13.33

round  2, metrics=<sparse_categorical_accuracy=0.0793333351612091,loss=2.2951035499572754>
2.2955 seconds
Tested. Sparse categorical accuracy: 10.00

round  3, metrics=<sparse_categorical_accuracy=0.11533333361148834,loss=2.2797505855560303>
2.4913 seconds
Tested. Sparse categorical accuracy: 15.00

round  4, metrics=<sparse_categorical_accuracy=0.09700000286102295,loss=2.2563834190368652>
2.3078 seconds
Tested. Sparse categorical accuracy: 23.33

round  5, metrics=<sparse_categorical_accuracy=0.21566666662693024,loss=2.1701531410217285>
2.4479 seconds
Tested. Sparse categorical accuracy: 20.00

round  6, metrics=<sparse_categorical_accuracy=0.34433332085609436,loss=2.1833574771881104>
2.1494 seconds
Tested. Sparse categorical accuracy: 50.00

round  7, metrics=<sparse_categorical_accuracy=0.5383333563804626,loss=1.8559612035751343>
2.2037 seconds
Tested. Sparse categorical accuracy: 36.67

round  8, metrics=<sparse_categorical_accuracy=0.24166665971279144,loss=2.8693768978118896>
2.1070 seconds
Tested. Sparse categorical accuracy: 23.33

round  9, metrics=<sparse_categorical_accuracy=0.24566666781902313,loss=2.2574806213378906>
2.0974 seconds
Tested. Sparse categorical accuracy: 33.33

round 10, metrics=<sparse_categorical_accuracy=0.3216666579246521,loss=2.142510175704956>
2.1792 seconds
Tested. Sparse categorical accuracy: 36.67

round 11, metrics=<sparse_categorical_accuracy=0.33899998664855957,loss=1.992723822593689>
2.0560 seconds
Tested. Sparse categorical accuracy: 56.67

round 12, metrics=<sparse_categorical_accuracy=0.4203333258628845,loss=1.8108012676239014>
2.1915 seconds
Tested. Sparse categorical accuracy: 71.67

round 13, metrics=<sparse_categorical_accuracy=0.518666684627533,loss=1.7070086002349854>
2.0428 seconds
Tested. Sparse categorical accuracy: 46.67

round 14, metrics=<sparse_categorical_accuracy=0.6613333225250244,loss=1.0918930768966675>
2.1657 seconds
Tested. Sparse categorical accuracy: 50.00

round 15, metrics=<sparse_categorical_accuracy=0.6103333234786987,loss=1.3215446472167969>
2.0246 seconds
Tested. Sparse categorical accuracy: 65.00

round 16, metrics=<sparse_categorical_accuracy=0.7193333506584167,loss=0.913011372089386>
2.1530 seconds
Tested. Sparse categorical accuracy: 76.67

round 17, metrics=<sparse_categorical_accuracy=0.7603333592414856,loss=0.7871962785720825>
2.3404 seconds
Tested. Sparse categorical accuracy: 91.67

round 18, metrics=<sparse_categorical_accuracy=0.793666660785675,loss=0.7182489633560181>
2.2252 seconds
Tested. Sparse categorical accuracy: 96.67

round 19, metrics=<sparse_categorical_accuracy=0.8373333215713501,loss=0.49929261207580566>
2.2411 seconds
Tested. Sparse categorical accuracy: 88.33

round 20, metrics=<sparse_categorical_accuracy=0.8600000143051147,loss=0.4587576389312744>
2.2888 seconds
Tested. Sparse categorical accuracy: 88.33

round 21, metrics=<sparse_categorical_accuracy=0.8913333415985107,loss=0.35509228706359863>
2.0294 seconds
Tested. Sparse categorical accuracy: 91.67

round 22, metrics=<sparse_categorical_accuracy=0.8776666522026062,loss=0.4089030623435974>
2.3795 seconds
Tested. Sparse categorical accuracy: 93.33

round 23, metrics=<sparse_categorical_accuracy=0.9243333339691162,loss=0.25271081924438477>
2.2502 seconds
Tested. Sparse categorical accuracy: 100.00

round 24, metrics=<sparse_categorical_accuracy=0.9123333096504211,loss=0.2808803617954254>
2.2140 seconds
Tested. Sparse categorical accuracy: 85.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
