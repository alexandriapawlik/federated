
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:08:36.250599: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  51
2020-07-15 23:08:35.767299

How often each label is chosen for non-IID data
[24, 21, 18, 23, 22, 23, 15, 24, 16, 14]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.13733333349227905,loss=2.3009727001190186>
3.0053 seconds
Tested. Sparse categorical accuracy: 26.67

round  2, metrics=<sparse_categorical_accuracy=0.11599999666213989,loss=2.2930524349212646>
2.1860 seconds
Tested. Sparse categorical accuracy: 11.67

round  3, metrics=<sparse_categorical_accuracy=0.11999999731779099,loss=2.2846310138702393>
2.1722 seconds
Tested. Sparse categorical accuracy: 35.00

round  4, metrics=<sparse_categorical_accuracy=0.21033333241939545,loss=2.2467007637023926>
2.1656 seconds
Tested. Sparse categorical accuracy: 46.67

round  5, metrics=<sparse_categorical_accuracy=0.25999999046325684,loss=2.2017624378204346>
2.1743 seconds
Tested. Sparse categorical accuracy: 43.33

round  6, metrics=<sparse_categorical_accuracy=0.3073333203792572,loss=2.1245033740997314>
2.0683 seconds
Tested. Sparse categorical accuracy: 46.67

round  7, metrics=<sparse_categorical_accuracy=0.4416666626930237,loss=2.0104002952575684>
2.2103 seconds
Tested. Sparse categorical accuracy: 30.00

round  8, metrics=<sparse_categorical_accuracy=0.44866666197776794,loss=1.6974371671676636>
2.0594 seconds
Tested. Sparse categorical accuracy: 86.67

round  9, metrics=<sparse_categorical_accuracy=0.46033334732055664,loss=1.8931902647018433>
2.1292 seconds
Tested. Sparse categorical accuracy: 53.33

round 10, metrics=<sparse_categorical_accuracy=0.6206666827201843,loss=1.348419427871704>
2.0448 seconds
Tested. Sparse categorical accuracy: 60.00

round 11, metrics=<sparse_categorical_accuracy=0.7103333473205566,loss=1.036621332168579>
2.1383 seconds
Tested. Sparse categorical accuracy: 78.33

round 12, metrics=<sparse_categorical_accuracy=0.6966666579246521,loss=1.237062692642212>
2.0405 seconds
Tested. Sparse categorical accuracy: 51.67

round 13, metrics=<sparse_categorical_accuracy=0.7289999723434448,loss=0.8207765221595764>
2.0609 seconds
Tested. Sparse categorical accuracy: 81.67

round 14, metrics=<sparse_categorical_accuracy=0.7720000147819519,loss=0.7141183018684387>
2.1256 seconds
Tested. Sparse categorical accuracy: 78.33

round 15, metrics=<sparse_categorical_accuracy=0.8193333148956299,loss=0.6343650817871094>
2.0049 seconds
Tested. Sparse categorical accuracy: 85.00

round 16, metrics=<sparse_categorical_accuracy=0.862666666507721,loss=0.4675503671169281>
2.0515 seconds
Tested. Sparse categorical accuracy: 91.67

round 17, metrics=<sparse_categorical_accuracy=0.8726666569709778,loss=0.41399645805358887>
2.1826 seconds
Tested. Sparse categorical accuracy: 100.00

round 18, metrics=<sparse_categorical_accuracy=0.8756666779518127,loss=0.41445836424827576>
2.0376 seconds
Tested. Sparse categorical accuracy: 98.33

round 19, metrics=<sparse_categorical_accuracy=0.9049999713897705,loss=0.3244622051715851>
2.1385 seconds
Tested. Sparse categorical accuracy: 93.33

round 20, metrics=<sparse_categorical_accuracy=0.9176666736602783,loss=0.27249178290367126>
2.0575 seconds
Tested. Sparse categorical accuracy: 88.33

round 21, metrics=<sparse_categorical_accuracy=0.9200000166893005,loss=0.2700890004634857>
2.0132 seconds
Tested. Sparse categorical accuracy: 96.67

round 22, metrics=<sparse_categorical_accuracy=0.9293333292007446,loss=0.2447195202112198>
2.2028 seconds
Tested. Sparse categorical accuracy: 100.00

round 23, metrics=<sparse_categorical_accuracy=0.9326666593551636,loss=0.20962312817573547>
2.0074 seconds
Tested. Sparse categorical accuracy: 95.00

round 24, metrics=<sparse_categorical_accuracy=0.9253333210945129,loss=0.2498345524072647>
1.9636 seconds
Tested. Sparse categorical accuracy: 98.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
