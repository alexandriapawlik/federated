
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:49:03.427001: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  446
2020-07-15 23:49:02.945120

How often each label is chosen for non-IID data
[22, 25, 23, 19, 17, 14, 19, 24, 16, 21]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.11999999731779099,loss=2.302415132522583>
3.4967 seconds
Tested. Sparse categorical accuracy: 1.67

round  2, metrics=<sparse_categorical_accuracy=0.09300000220537186,loss=2.2934558391571045>
2.7225 seconds
Tested. Sparse categorical accuracy: 25.00

round  3, metrics=<sparse_categorical_accuracy=0.12066666781902313,loss=2.2697763442993164>
2.7142 seconds
Tested. Sparse categorical accuracy: 11.67

round  4, metrics=<sparse_categorical_accuracy=0.17866666615009308,loss=2.2279136180877686>
2.4672 seconds
Tested. Sparse categorical accuracy: 33.33

round  5, metrics=<sparse_categorical_accuracy=0.24400000274181366,loss=2.1456291675567627>
2.6924 seconds
Tested. Sparse categorical accuracy: 60.00

round  6, metrics=<sparse_categorical_accuracy=0.3713333308696747,loss=2.1677112579345703>
2.5382 seconds
Tested. Sparse categorical accuracy: 41.67

round  7, metrics=<sparse_categorical_accuracy=0.46566668152809143,loss=1.9794049263000488>
2.7019 seconds
Tested. Sparse categorical accuracy: 28.33

round  8, metrics=<sparse_categorical_accuracy=0.5230000019073486,loss=1.8443880081176758>
2.5162 seconds
Tested. Sparse categorical accuracy: 45.00

round  9, metrics=<sparse_categorical_accuracy=0.5809999704360962,loss=1.4450297355651855>
2.4841 seconds
Tested. Sparse categorical accuracy: 50.00

round 10, metrics=<sparse_categorical_accuracy=0.597000002861023,loss=1.5449458360671997>
2.6415 seconds
Tested. Sparse categorical accuracy: 61.67

round 11, metrics=<sparse_categorical_accuracy=0.750333309173584,loss=0.8351656794548035>
2.4937 seconds
Tested. Sparse categorical accuracy: 85.00

round 12, metrics=<sparse_categorical_accuracy=0.7566666603088379,loss=0.862630307674408>
2.6841 seconds
Tested. Sparse categorical accuracy: 93.33

round 13, metrics=<sparse_categorical_accuracy=0.7816666960716248,loss=0.7632709741592407>
2.4909 seconds
Tested. Sparse categorical accuracy: 86.67

round 14, metrics=<sparse_categorical_accuracy=0.8186666369438171,loss=0.6518805623054504>
2.6636 seconds
Tested. Sparse categorical accuracy: 81.67

round 15, metrics=<sparse_categorical_accuracy=0.8603333234786987,loss=0.5121252536773682>
2.4838 seconds
Tested. Sparse categorical accuracy: 86.67

round 16, metrics=<sparse_categorical_accuracy=0.871666669845581,loss=0.47626566886901855>
2.4552 seconds
Tested. Sparse categorical accuracy: 80.00

round 17, metrics=<sparse_categorical_accuracy=0.8676666617393494,loss=0.46508023142814636>
2.6533 seconds
Tested. Sparse categorical accuracy: 90.00

round 18, metrics=<sparse_categorical_accuracy=0.8743333220481873,loss=0.4465329945087433>
2.4342 seconds
Tested. Sparse categorical accuracy: 80.00

round 19, metrics=<sparse_categorical_accuracy=0.9179999828338623,loss=0.2829214632511139>
2.4190 seconds
Tested. Sparse categorical accuracy: 90.00

round 20, metrics=<sparse_categorical_accuracy=0.9233333468437195,loss=0.24263550341129303>
2.7891 seconds
Tested. Sparse categorical accuracy: 96.67

round 21, metrics=<sparse_categorical_accuracy=0.9166666865348816,loss=0.2767786681652069>
2.5563 seconds
Tested. Sparse categorical accuracy: 91.67

round 22, metrics=<sparse_categorical_accuracy=0.9143333435058594,loss=0.26523151993751526>
2.3796 seconds
Tested. Sparse categorical accuracy: 86.67

round 23, metrics=<sparse_categorical_accuracy=0.9183333516120911,loss=0.28790488839149475>
2.8367 seconds
Tested. Sparse categorical accuracy: 95.00

round 24, metrics=<sparse_categorical_accuracy=0.9336666464805603,loss=0.2251967340707779>
2.4366 seconds
Tested. Sparse categorical accuracy: 98.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
