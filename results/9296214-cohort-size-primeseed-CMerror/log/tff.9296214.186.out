
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:21:49.161502: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  186
2020-07-15 23:21:48.668872

How often each label is chosen for non-IID data
[23, 16, 30, 20, 15, 22, 8, 20, 24, 22]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.09200000017881393,loss=2.3055031299591064>
3.5876 seconds
Tested. Sparse categorical accuracy: 15.00

round  2, metrics=<sparse_categorical_accuracy=0.15000000596046448,loss=2.2961721420288086>
2.7602 seconds
Tested. Sparse categorical accuracy: 26.67

round  3, metrics=<sparse_categorical_accuracy=0.2163333296775818,loss=2.2784979343414307>
2.7422 seconds
Tested. Sparse categorical accuracy: 25.00

round  4, metrics=<sparse_categorical_accuracy=0.15933333337306976,loss=2.2461159229278564>
2.5676 seconds
Tested. Sparse categorical accuracy: 48.33

round  5, metrics=<sparse_categorical_accuracy=0.28066667914390564,loss=2.1691839694976807>
2.8208 seconds
Tested. Sparse categorical accuracy: 43.33

round  6, metrics=<sparse_categorical_accuracy=0.328000009059906,loss=2.235487699508667>
2.6036 seconds
Tested. Sparse categorical accuracy: 37.50

round  7, metrics=<sparse_categorical_accuracy=0.3643333315849304,loss=2.0109245777130127>
2.8073 seconds
Tested. Sparse categorical accuracy: 38.33

round  8, metrics=<sparse_categorical_accuracy=0.4519999921321869,loss=1.9695346355438232>
2.6129 seconds
Tested. Sparse categorical accuracy: 65.00

round  9, metrics=<sparse_categorical_accuracy=0.5236666798591614,loss=1.6357444524765015>
2.6835 seconds
Tested. Sparse categorical accuracy: 38.33

round 10, metrics=<sparse_categorical_accuracy=0.6176666617393494,loss=1.3529070615768433>
2.5556 seconds
Tested. Sparse categorical accuracy: 71.67

round 11, metrics=<sparse_categorical_accuracy=0.6503333449363708,loss=1.3079946041107178>
2.8847 seconds
Tested. Sparse categorical accuracy: 66.67

round 12, metrics=<sparse_categorical_accuracy=0.6963333487510681,loss=1.1198186874389648>
2.4219 seconds
Tested. Sparse categorical accuracy: 63.33

round 13, metrics=<sparse_categorical_accuracy=0.718999981880188,loss=0.877782940864563>
2.5561 seconds
Tested. Sparse categorical accuracy: 83.33

round 14, metrics=<sparse_categorical_accuracy=0.8119999766349792,loss=0.6565943360328674>
2.7262 seconds
Tested. Sparse categorical accuracy: 88.33

round 15, metrics=<sparse_categorical_accuracy=0.8240000009536743,loss=0.6047613024711609>
2.4881 seconds
Tested. Sparse categorical accuracy: 93.33

round 16, metrics=<sparse_categorical_accuracy=0.8700000047683716,loss=0.44278088212013245>
2.6550 seconds
Tested. Sparse categorical accuracy: 86.67

round 17, metrics=<sparse_categorical_accuracy=0.875333309173584,loss=0.41073065996170044>
2.5462 seconds
Tested. Sparse categorical accuracy: 70.00

round 18, metrics=<sparse_categorical_accuracy=0.8706666827201843,loss=0.42342641949653625>
2.4350 seconds
Tested. Sparse categorical accuracy: 83.33

round 19, metrics=<sparse_categorical_accuracy=0.8793333172798157,loss=0.40209802985191345>
2.6820 seconds
Tested. Sparse categorical accuracy: 83.33

round 20, metrics=<sparse_categorical_accuracy=0.9076666831970215,loss=0.30232861638069153>
2.5066 seconds
Tested. Sparse categorical accuracy: 83.33

round 21, metrics=<sparse_categorical_accuracy=0.9086666703224182,loss=0.3000028133392334>
2.6609 seconds
Tested. Sparse categorical accuracy: 90.00

round 22, metrics=<sparse_categorical_accuracy=0.9259999990463257,loss=0.24162903428077698>
2.4272 seconds
Tested. Sparse categorical accuracy: 95.00

round 23, metrics=<sparse_categorical_accuracy=0.9309999942779541,loss=0.22300085425376892>
2.4737 seconds
Tested. Sparse categorical accuracy: 100.00

round 24, metrics=<sparse_categorical_accuracy=0.9353333115577698,loss=0.2082197219133377>
2.6727 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
