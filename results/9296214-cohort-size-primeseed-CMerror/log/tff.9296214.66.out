
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:10:11.366680: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  66
2020-07-15 23:10:10.859337

How often each label is chosen for non-IID data
[21, 26, 16, 22, 20, 18, 20, 21, 22, 14]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.13099999725818634,loss=2.3046982288360596>
3.7904 seconds
Tested. Sparse categorical accuracy: 16.67

round  2, metrics=<sparse_categorical_accuracy=0.12999999523162842,loss=2.2958621978759766>
3.1361 seconds
Tested. Sparse categorical accuracy: 8.33

round  3, metrics=<sparse_categorical_accuracy=0.10833333432674408,loss=2.27897310256958>
2.8562 seconds
Tested. Sparse categorical accuracy: 28.33

round  4, metrics=<sparse_categorical_accuracy=0.13199999928474426,loss=2.2345378398895264>
2.7694 seconds
Tested. Sparse categorical accuracy: 41.67

round  5, metrics=<sparse_categorical_accuracy=0.2370000034570694,loss=2.161670684814453>
2.9776 seconds
Tested. Sparse categorical accuracy: 68.33

round  6, metrics=<sparse_categorical_accuracy=0.367000013589859,loss=2.2158241271972656>
2.7891 seconds
Tested. Sparse categorical accuracy: 53.33

round  7, metrics=<sparse_categorical_accuracy=0.45533332228660583,loss=1.8138359785079956>
2.8101 seconds
Tested. Sparse categorical accuracy: 83.33

round  8, metrics=<sparse_categorical_accuracy=0.23333333432674408,loss=2.89249587059021>
2.8752 seconds
Tested. Sparse categorical accuracy: 10.00

round  9, metrics=<sparse_categorical_accuracy=0.18400000035762787,loss=2.277775526046753>
3.0577 seconds
Tested. Sparse categorical accuracy: 40.00

round 10, metrics=<sparse_categorical_accuracy=0.2396666705608368,loss=2.2213382720947266>
2.8932 seconds
Tested. Sparse categorical accuracy: 55.00

round 11, metrics=<sparse_categorical_accuracy=0.34833332896232605,loss=1.9985036849975586>
2.7925 seconds
Tested. Sparse categorical accuracy: 65.00

round 12, metrics=<sparse_categorical_accuracy=0.3596666753292084,loss=2.1860554218292236>
2.9293 seconds
Tested. Sparse categorical accuracy: 41.67

round 13, metrics=<sparse_categorical_accuracy=0.4546666741371155,loss=1.611776351928711>
2.7810 seconds
Tested. Sparse categorical accuracy: 78.33

round 14, metrics=<sparse_categorical_accuracy=0.5693333148956299,loss=1.6186308860778809>
3.1349 seconds
Tested. Sparse categorical accuracy: 71.67

round 15, metrics=<sparse_categorical_accuracy=0.6973333358764648,loss=1.071116328239441>
2.4817 seconds
Tested. Sparse categorical accuracy: 91.67

round 16, metrics=<sparse_categorical_accuracy=0.7456666827201843,loss=0.9028143882751465>
2.9792 seconds
Tested. Sparse categorical accuracy: 70.00

round 17, metrics=<sparse_categorical_accuracy=0.7689999938011169,loss=0.8567613363265991>
2.7889 seconds
Tested. Sparse categorical accuracy: 81.67

round 18, metrics=<sparse_categorical_accuracy=0.8483333587646484,loss=0.5050334334373474>
2.8335 seconds
Tested. Sparse categorical accuracy: 83.33

round 19, metrics=<sparse_categorical_accuracy=0.843999981880188,loss=0.5564658045768738>
2.7072 seconds
Tested. Sparse categorical accuracy: 75.00

round 20, metrics=<sparse_categorical_accuracy=0.8636666536331177,loss=0.48912563920021057>
2.7872 seconds
Tested. Sparse categorical accuracy: 91.67

round 21, metrics=<sparse_categorical_accuracy=0.890666663646698,loss=0.3686709403991699>
2.8438 seconds
Tested. Sparse categorical accuracy: 81.67

round 22, metrics=<sparse_categorical_accuracy=0.902999997138977,loss=0.3269135653972626>
2.8333 seconds
Tested. Sparse categorical accuracy: 100.00

round 23, metrics=<sparse_categorical_accuracy=0.9070000052452087,loss=0.29510483145713806>
2.4372 seconds
Tested. Sparse categorical accuracy: 91.67

round 24, metrics=<sparse_categorical_accuracy=0.9166666865348816,loss=0.2843796908855438>
2.3996 seconds
Tested. Sparse categorical accuracy: 98.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
