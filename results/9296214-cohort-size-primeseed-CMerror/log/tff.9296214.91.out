
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:12:19.462723: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  91
2020-07-15 23:12:18.934415

How often each label is chosen for non-IID data
[16, 17, 28, 16, 24, 20, 18, 26, 23, 12]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.11800000071525574,loss=2.3022871017456055>
4.1331 seconds
Tested. Sparse categorical accuracy: 13.33

round  2, metrics=<sparse_categorical_accuracy=0.09733333438634872,loss=2.294654607772827>
3.1589 seconds
Tested. Sparse categorical accuracy: 21.67

round  3, metrics=<sparse_categorical_accuracy=0.1459999978542328,loss=2.273204803466797>
3.2405 seconds
Tested. Sparse categorical accuracy: 36.67

round  4, metrics=<sparse_categorical_accuracy=0.16033333539962769,loss=2.230159282684326>
2.9296 seconds
Tested. Sparse categorical accuracy: 30.00

round  5, metrics=<sparse_categorical_accuracy=0.20466665923595428,loss=2.1920359134674072>
3.1988 seconds
Tested. Sparse categorical accuracy: 41.67

round  6, metrics=<sparse_categorical_accuracy=0.3959999978542328,loss=2.253671169281006>
2.9503 seconds
Tested. Sparse categorical accuracy: 50.00

round  7, metrics=<sparse_categorical_accuracy=0.37833333015441895,loss=2.189872980117798>
3.2119 seconds
Tested. Sparse categorical accuracy: 48.33

round  8, metrics=<sparse_categorical_accuracy=0.4116666615009308,loss=1.9735808372497559>
3.0044 seconds
Tested. Sparse categorical accuracy: 63.33

round  9, metrics=<sparse_categorical_accuracy=0.5236666798591614,loss=1.7666305303573608>
3.4529 seconds
Tested. Sparse categorical accuracy: 71.67

round 10, metrics=<sparse_categorical_accuracy=0.6299999952316284,loss=1.4065426588058472>
2.7502 seconds
Tested. Sparse categorical accuracy: 76.67

round 11, metrics=<sparse_categorical_accuracy=0.6520000100135803,loss=1.2186070680618286>
2.7491 seconds
Tested. Sparse categorical accuracy: 78.33

round 12, metrics=<sparse_categorical_accuracy=0.718999981880188,loss=0.9266864657402039>
2.7690 seconds
Tested. Sparse categorical accuracy: 98.33

round 13, metrics=<sparse_categorical_accuracy=0.8053333163261414,loss=0.7407885193824768>
3.2133 seconds
Tested. Sparse categorical accuracy: 71.67

round 14, metrics=<sparse_categorical_accuracy=0.8133333325386047,loss=0.6402645707130432>
2.6188 seconds
Tested. Sparse categorical accuracy: 93.33

round 15, metrics=<sparse_categorical_accuracy=0.8446666598320007,loss=0.5771370530128479>
2.9037 seconds
Tested. Sparse categorical accuracy: 96.67

round 16, metrics=<sparse_categorical_accuracy=0.8786666393280029,loss=0.4371201694011688>
3.1783 seconds
Tested. Sparse categorical accuracy: 85.00

round 17, metrics=<sparse_categorical_accuracy=0.893666684627533,loss=0.37133854627609253>
2.9574 seconds
Tested. Sparse categorical accuracy: 90.00

round 18, metrics=<sparse_categorical_accuracy=0.9043333530426025,loss=0.38207268714904785>
2.9041 seconds
Tested. Sparse categorical accuracy: 93.33

round 19, metrics=<sparse_categorical_accuracy=0.8913333415985107,loss=0.3576021194458008>
2.8655 seconds
Tested. Sparse categorical accuracy: 88.33

round 20, metrics=<sparse_categorical_accuracy=0.921999990940094,loss=0.2723897695541382>
2.7471 seconds
Tested. Sparse categorical accuracy: 93.33

round 21, metrics=<sparse_categorical_accuracy=0.9089999794960022,loss=0.30498963594436646>
2.9048 seconds
Tested. Sparse categorical accuracy: 83.33

round 22, metrics=<sparse_categorical_accuracy=0.9196666479110718,loss=0.2596454918384552>
2.8645 seconds
Tested. Sparse categorical accuracy: 83.33

round 23, metrics=<sparse_categorical_accuracy=0.9426666498184204,loss=0.20552696287631989>
2.6625 seconds
Tested. Sparse categorical accuracy: 100.00

round 24, metrics=<sparse_categorical_accuracy=0.9103333353996277,loss=0.2879551947116852>
3.0694 seconds
Tested. Sparse categorical accuracy: 90.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
