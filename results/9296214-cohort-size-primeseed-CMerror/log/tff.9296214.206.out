
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:23:50.144169: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  206
2020-07-15 23:23:49.653969

How often each label is chosen for non-IID data
[26, 18, 22, 16, 20, 22, 14, 22, 24, 16]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.10000000149011612,loss=2.303920030593872>
3.1172 seconds
Tested. Sparse categorical accuracy: 6.67

round  2, metrics=<sparse_categorical_accuracy=0.10866666585206985,loss=2.2955706119537354>
2.2385 seconds
Tested. Sparse categorical accuracy: 18.33

round  3, metrics=<sparse_categorical_accuracy=0.12700000405311584,loss=2.277495861053467>
2.2904 seconds
Tested. Sparse categorical accuracy: 8.33

round  4, metrics=<sparse_categorical_accuracy=0.12066666781902313,loss=2.2441065311431885>
2.1532 seconds
Tested. Sparse categorical accuracy: 10.00

round  5, metrics=<sparse_categorical_accuracy=0.21666666865348816,loss=2.2220630645751953>
2.2800 seconds
Tested. Sparse categorical accuracy: 43.33

round  6, metrics=<sparse_categorical_accuracy=0.3876666724681854,loss=2.228710412979126>
2.1099 seconds
Tested. Sparse categorical accuracy: 31.67

round  7, metrics=<sparse_categorical_accuracy=0.3323333263397217,loss=2.1395978927612305>
2.3026 seconds
Tested. Sparse categorical accuracy: 38.33

round  8, metrics=<sparse_categorical_accuracy=0.4189999997615814,loss=2.267371654510498>
2.1315 seconds
Tested. Sparse categorical accuracy: 21.67

round  9, metrics=<sparse_categorical_accuracy=0.367333322763443,loss=2.130000114440918>
2.1996 seconds
Tested. Sparse categorical accuracy: 43.33

round 10, metrics=<sparse_categorical_accuracy=0.41333332657814026,loss=1.9139925241470337>
2.1793 seconds
Tested. Sparse categorical accuracy: 56.67

round 11, metrics=<sparse_categorical_accuracy=0.503000020980835,loss=1.6036262512207031>
2.2662 seconds
Tested. Sparse categorical accuracy: 65.00

round 12, metrics=<sparse_categorical_accuracy=0.6700000166893005,loss=1.1541917324066162>
2.1102 seconds
Tested. Sparse categorical accuracy: 78.33

round 13, metrics=<sparse_categorical_accuracy=0.7563333511352539,loss=0.9596454501152039>
2.2688 seconds
Tested. Sparse categorical accuracy: 71.67

round 14, metrics=<sparse_categorical_accuracy=0.7586666941642761,loss=0.9099988341331482>
2.1249 seconds
Tested. Sparse categorical accuracy: 86.67

round 15, metrics=<sparse_categorical_accuracy=0.7960000038146973,loss=0.7447496652603149>
2.1537 seconds
Tested. Sparse categorical accuracy: 80.00

round 16, metrics=<sparse_categorical_accuracy=0.8346666693687439,loss=0.5826289653778076>
2.2597 seconds
Tested. Sparse categorical accuracy: 88.33

round 17, metrics=<sparse_categorical_accuracy=0.8726666569709778,loss=0.4475298523902893>
2.1004 seconds
Tested. Sparse categorical accuracy: 98.33

round 18, metrics=<sparse_categorical_accuracy=0.8880000114440918,loss=0.3713485896587372>
2.0588 seconds
Tested. Sparse categorical accuracy: 98.33

round 19, metrics=<sparse_categorical_accuracy=0.9010000228881836,loss=0.3258385956287384>
2.2432 seconds
Tested. Sparse categorical accuracy: 86.67

round 20, metrics=<sparse_categorical_accuracy=0.906000018119812,loss=0.3093510866165161>
2.0929 seconds
Tested. Sparse categorical accuracy: 95.00

round 21, metrics=<sparse_categorical_accuracy=0.9139999747276306,loss=0.29658252000808716>
2.2858 seconds
Tested. Sparse categorical accuracy: 91.67

round 22, metrics=<sparse_categorical_accuracy=0.9226666688919067,loss=0.2531832456588745>
2.0736 seconds
Tested. Sparse categorical accuracy: 96.67

round 23, metrics=<sparse_categorical_accuracy=0.9076666831970215,loss=0.3052294850349426>
2.1104 seconds
Tested. Sparse categorical accuracy: 100.00

round 24, metrics=<sparse_categorical_accuracy=0.9166666865348816,loss=0.31372541189193726>
2.2056 seconds
Tested. Sparse categorical accuracy: 100.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
