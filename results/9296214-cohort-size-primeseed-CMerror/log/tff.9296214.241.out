
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:27:20.299702: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  241
2020-07-15 23:27:19.817396

How often each label is chosen for non-IID data
[22, 17, 16, 14, 21, 17, 28, 25, 20, 20]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.10066666454076767,loss=2.303292989730835>
3.5433 seconds
Tested. Sparse categorical accuracy: 26.67

round  2, metrics=<sparse_categorical_accuracy=0.12099999934434891,loss=2.291959524154663>
2.7061 seconds
Tested. Sparse categorical accuracy: 38.33

round  3, metrics=<sparse_categorical_accuracy=0.15333333611488342,loss=2.274298906326294>
2.7516 seconds
Tested. Sparse categorical accuracy: 13.33

round  4, metrics=<sparse_categorical_accuracy=0.1066666692495346,loss=2.243446111679077>
2.4784 seconds
Tested. Sparse categorical accuracy: 28.33

round  5, metrics=<sparse_categorical_accuracy=0.17499999701976776,loss=2.1885292530059814>
2.7675 seconds
Tested. Sparse categorical accuracy: 63.33

round  6, metrics=<sparse_categorical_accuracy=0.33266666531562805,loss=2.26252818107605>
2.3381 seconds
Tested. Sparse categorical accuracy: 55.00

round  7, metrics=<sparse_categorical_accuracy=0.4086666703224182,loss=2.0035219192504883>
2.8126 seconds
Tested. Sparse categorical accuracy: 60.00

round  8, metrics=<sparse_categorical_accuracy=0.2893333435058594,loss=2.8589870929718018>
2.4137 seconds
Tested. Sparse categorical accuracy: 18.33

round  9, metrics=<sparse_categorical_accuracy=0.13866665959358215,loss=2.294959545135498>
2.6754 seconds
Tested. Sparse categorical accuracy: 10.00

round 10, metrics=<sparse_categorical_accuracy=0.12933333218097687,loss=2.2859649658203125>
2.3662 seconds
Tested. Sparse categorical accuracy: 23.33

round 11, metrics=<sparse_categorical_accuracy=0.23233333230018616,loss=2.2713754177093506>
2.7390 seconds
Tested. Sparse categorical accuracy: 20.00

round 12, metrics=<sparse_categorical_accuracy=0.27166667580604553,loss=2.2242543697357178>
2.4233 seconds
Tested. Sparse categorical accuracy: 53.33

round 13, metrics=<sparse_categorical_accuracy=0.3726666569709778,loss=2.043151617050171>
2.4221 seconds
Tested. Sparse categorical accuracy: 65.00

round 14, metrics=<sparse_categorical_accuracy=0.460999995470047,loss=2.1473865509033203>
2.6578 seconds
Tested. Sparse categorical accuracy: 51.67

round 15, metrics=<sparse_categorical_accuracy=0.5396666526794434,loss=1.689326524734497>
2.3993 seconds
Tested. Sparse categorical accuracy: 63.33

round 16, metrics=<sparse_categorical_accuracy=0.5463333129882812,loss=1.6631072759628296>
2.6964 seconds
Tested. Sparse categorical accuracy: 60.00

round 17, metrics=<sparse_categorical_accuracy=0.6903333067893982,loss=1.0219099521636963>
2.4749 seconds
Tested. Sparse categorical accuracy: 78.33

round 18, metrics=<sparse_categorical_accuracy=0.7526666522026062,loss=0.8519383072853088>
2.8065 seconds
Tested. Sparse categorical accuracy: 71.67

round 19, metrics=<sparse_categorical_accuracy=0.7609999775886536,loss=0.8461383581161499>
2.7737 seconds
Tested. Sparse categorical accuracy: 95.00

round 20, metrics=<sparse_categorical_accuracy=0.7853333353996277,loss=0.8035722374916077>
2.4258 seconds
Tested. Sparse categorical accuracy: 75.00

round 21, metrics=<sparse_categorical_accuracy=0.8316666483879089,loss=0.5717498064041138>
2.4219 seconds
Tested. Sparse categorical accuracy: 86.67

round 22, metrics=<sparse_categorical_accuracy=0.8476666808128357,loss=0.527642548084259>
2.5978 seconds
Tested. Sparse categorical accuracy: 90.00

round 23, metrics=<sparse_categorical_accuracy=0.8833333253860474,loss=0.4223046600818634>
2.3598 seconds
Tested. Sparse categorical accuracy: 98.33

round 24, metrics=<sparse_categorical_accuracy=0.8843333125114441,loss=0.40352684259414673>
2.3819 seconds
Tested. Sparse categorical accuracy: 91.67

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
