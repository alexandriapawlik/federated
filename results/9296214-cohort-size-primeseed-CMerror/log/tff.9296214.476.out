
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:52:05.682461: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  476
2020-07-15 23:52:05.197853

How often each label is chosen for non-IID data
[13, 21, 19, 29, 19, 22, 21, 20, 20, 16]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.109333336353302,loss=2.303065776824951>
3.0585 seconds
Tested. Sparse categorical accuracy: 6.67

round  2, metrics=<sparse_categorical_accuracy=0.1536666601896286,loss=2.2895405292510986>
2.1658 seconds
Tested. Sparse categorical accuracy: 16.67

round  3, metrics=<sparse_categorical_accuracy=0.11633333563804626,loss=2.279850721359253>
2.3074 seconds
Tested. Sparse categorical accuracy: 33.33

round  4, metrics=<sparse_categorical_accuracy=0.13300000131130219,loss=2.2405142784118652>
2.2226 seconds
Tested. Sparse categorical accuracy: 36.67

round  5, metrics=<sparse_categorical_accuracy=0.22766666114330292,loss=2.141660451889038>
2.3111 seconds
Tested. Sparse categorical accuracy: 48.33

round  6, metrics=<sparse_categorical_accuracy=0.33666667342185974,loss=2.233961343765259>
2.1833 seconds
Tested. Sparse categorical accuracy: 38.33

round  7, metrics=<sparse_categorical_accuracy=0.43933331966400146,loss=1.9873992204666138>
2.1499 seconds
Tested. Sparse categorical accuracy: 38.33

round  8, metrics=<sparse_categorical_accuracy=0.4076666533946991,loss=2.323479175567627>
2.1268 seconds
Tested. Sparse categorical accuracy: 48.33

round  9, metrics=<sparse_categorical_accuracy=0.4346666634082794,loss=1.9973260164260864>
2.3417 seconds
Tested. Sparse categorical accuracy: 40.00

round 10, metrics=<sparse_categorical_accuracy=0.5093333125114441,loss=1.7592620849609375>
2.1504 seconds
Tested. Sparse categorical accuracy: 46.67

round 11, metrics=<sparse_categorical_accuracy=0.534333348274231,loss=1.594386339187622>
2.0954 seconds
Tested. Sparse categorical accuracy: 65.00

round 12, metrics=<sparse_categorical_accuracy=0.6756666898727417,loss=1.0588408708572388>
2.2290 seconds
Tested. Sparse categorical accuracy: 73.33

round 13, metrics=<sparse_categorical_accuracy=0.7213333249092102,loss=0.9081583619117737>
2.1181 seconds
Tested. Sparse categorical accuracy: 81.67

round 14, metrics=<sparse_categorical_accuracy=0.7746666669845581,loss=0.7154654264450073>
2.2716 seconds
Tested. Sparse categorical accuracy: 95.00

round 15, metrics=<sparse_categorical_accuracy=0.828000009059906,loss=0.5763860940933228>
2.1848 seconds
Tested. Sparse categorical accuracy: 76.67

round 16, metrics=<sparse_categorical_accuracy=0.8240000009536743,loss=0.6105682849884033>
2.2187 seconds
Tested. Sparse categorical accuracy: 93.33

round 17, metrics=<sparse_categorical_accuracy=0.8640000224113464,loss=0.4509916603565216>
2.0646 seconds
Tested. Sparse categorical accuracy: 93.33

round 18, metrics=<sparse_categorical_accuracy=0.8650000095367432,loss=0.44752100110054016>
2.1431 seconds
Tested. Sparse categorical accuracy: 95.00

round 19, metrics=<sparse_categorical_accuracy=0.8683333396911621,loss=0.4261833131313324>
2.2754 seconds
Tested. Sparse categorical accuracy: 91.67

round 20, metrics=<sparse_categorical_accuracy=0.9120000004768372,loss=0.3033159375190735>
2.1188 seconds
Tested. Sparse categorical accuracy: 90.00

round 21, metrics=<sparse_categorical_accuracy=0.906333327293396,loss=0.30097219347953796>
2.0497 seconds
Tested. Sparse categorical accuracy: 93.33

round 22, metrics=<sparse_categorical_accuracy=0.9243333339691162,loss=0.2627907991409302>
2.1741 seconds
Tested. Sparse categorical accuracy: 95.00

round 23, metrics=<sparse_categorical_accuracy=0.9296666383743286,loss=0.23618750274181366>
2.0371 seconds
Tested. Sparse categorical accuracy: 91.67

round 24, metrics=<sparse_categorical_accuracy=0.9309999942779541,loss=0.2217904031276703>
2.0125 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
