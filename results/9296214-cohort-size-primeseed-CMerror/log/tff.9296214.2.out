
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

2020-07-15 23:04:09.927826: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  2
2020-07-15 23:04:08.915835

How often each label is chosen for non-IID data
[13, 26, 22, 22, 16, 20, 24, 16, 23, 18]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.12516666948795319,loss=2.2829720973968506>
7.2820 seconds
Tested. Sparse categorical accuracy: 10.00

round  2, metrics=<sparse_categorical_accuracy=0.1626666635274887,loss=2.2425308227539062>
5.3831 seconds
Tested. Sparse categorical accuracy: 60.00

round  3, metrics=<sparse_categorical_accuracy=0.35866665840148926,loss=2.202561140060425>
5.2066 seconds
Tested. Sparse categorical accuracy: 33.33

round  4, metrics=<sparse_categorical_accuracy=0.37933334708213806,loss=2.090319871902466>
5.1937 seconds
Tested. Sparse categorical accuracy: 63.33

round  5, metrics=<sparse_categorical_accuracy=0.4971666634082794,loss=1.7246761322021484>
5.2511 seconds
Tested. Sparse categorical accuracy: 50.00

round  6, metrics=<sparse_categorical_accuracy=0.6753333210945129,loss=1.0412710905075073>
5.3348 seconds
Tested. Sparse categorical accuracy: 66.67

round  7, metrics=<sparse_categorical_accuracy=0.7431666851043701,loss=0.8779144883155823>
4.7971 seconds
Tested. Sparse categorical accuracy: 90.00

round  8, metrics=<sparse_categorical_accuracy=0.8336666822433472,loss=0.5581303834915161>
5.1779 seconds
Tested. Sparse categorical accuracy: 86.67

round  9, metrics=<sparse_categorical_accuracy=0.8721666932106018,loss=0.430818647146225>
5.2415 seconds
Tested. Sparse categorical accuracy: 90.00

round 10, metrics=<sparse_categorical_accuracy=0.8759999871253967,loss=0.4189067780971527>
4.7421 seconds
Tested. Sparse categorical accuracy: 90.00

round 11, metrics=<sparse_categorical_accuracy=0.9045000076293945,loss=0.3188159763813019>
5.2733 seconds
Tested. Sparse categorical accuracy: 90.00

round 12, metrics=<sparse_categorical_accuracy=0.9135000109672546,loss=0.28034812211990356>
5.0691 seconds
Tested. Sparse categorical accuracy: 93.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 30]
