
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:48:35.862710: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  441
2020-07-15 23:48:35.378641

How often each label is chosen for non-IID data
[23, 17, 22, 25, 23, 16, 19, 24, 18, 13]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.12200000137090683,loss=2.3024473190307617>
2.9642 seconds
Tested. Sparse categorical accuracy: 25.00

round  2, metrics=<sparse_categorical_accuracy=0.13866665959358215,loss=2.2938880920410156>
2.2251 seconds
Tested. Sparse categorical accuracy: 6.67

round  3, metrics=<sparse_categorical_accuracy=0.10466666519641876,loss=2.2817676067352295>
2.2934 seconds
Tested. Sparse categorical accuracy: 13.33

round  4, metrics=<sparse_categorical_accuracy=0.15399999916553497,loss=2.2439823150634766>
2.1623 seconds
Tested. Sparse categorical accuracy: 21.67

round  5, metrics=<sparse_categorical_accuracy=0.20633333921432495,loss=2.162449598312378>
2.2869 seconds
Tested. Sparse categorical accuracy: 50.00

round  6, metrics=<sparse_categorical_accuracy=0.3233333230018616,loss=2.14462947845459>
2.2099 seconds
Tested. Sparse categorical accuracy: 30.00

round  7, metrics=<sparse_categorical_accuracy=0.41466665267944336,loss=2.029845952987671>
2.3399 seconds
Tested. Sparse categorical accuracy: 68.33

round  8, metrics=<sparse_categorical_accuracy=0.5023333430290222,loss=1.9524421691894531>
2.1365 seconds
Tested. Sparse categorical accuracy: 46.67

round  9, metrics=<sparse_categorical_accuracy=0.5199999809265137,loss=1.7849196195602417>
2.3112 seconds
Tested. Sparse categorical accuracy: 51.67

round 10, metrics=<sparse_categorical_accuracy=0.5496666431427002,loss=1.5295490026474>
2.1146 seconds
Tested. Sparse categorical accuracy: 65.00

round 11, metrics=<sparse_categorical_accuracy=0.7136666774749756,loss=0.9623724222183228>
2.3459 seconds
Tested. Sparse categorical accuracy: 85.00

round 12, metrics=<sparse_categorical_accuracy=0.762666642665863,loss=0.8948197960853577>
2.1176 seconds
Tested. Sparse categorical accuracy: 70.00

round 13, metrics=<sparse_categorical_accuracy=0.7846666574478149,loss=0.7415655851364136>
2.0986 seconds
Tested. Sparse categorical accuracy: 78.33

round 14, metrics=<sparse_categorical_accuracy=0.8333333134651184,loss=0.5765166282653809>
2.2516 seconds
Tested. Sparse categorical accuracy: 100.00

round 15, metrics=<sparse_categorical_accuracy=0.8700000047683716,loss=0.4684138596057892>
2.1561 seconds
Tested. Sparse categorical accuracy: 95.00

round 16, metrics=<sparse_categorical_accuracy=0.8370000123977661,loss=0.5693960189819336>
2.3256 seconds
Tested. Sparse categorical accuracy: 91.67

round 17, metrics=<sparse_categorical_accuracy=0.8553333282470703,loss=0.49148181080818176>
2.1253 seconds
Tested. Sparse categorical accuracy: 95.00

round 18, metrics=<sparse_categorical_accuracy=0.9079999923706055,loss=0.3303276300430298>
2.0981 seconds
Tested. Sparse categorical accuracy: 98.33

round 19, metrics=<sparse_categorical_accuracy=0.8899999856948853,loss=0.3725427985191345>
2.2273 seconds
Tested. Sparse categorical accuracy: 90.00

round 20, metrics=<sparse_categorical_accuracy=0.906333327293396,loss=0.33558985590934753>
2.0881 seconds
Tested. Sparse categorical accuracy: 95.00

round 21, metrics=<sparse_categorical_accuracy=0.9206666946411133,loss=0.27696725726127625>
2.1108 seconds
Tested. Sparse categorical accuracy: 98.33

round 22, metrics=<sparse_categorical_accuracy=0.9139999747276306,loss=0.28988075256347656>
2.2124 seconds
Tested. Sparse categorical accuracy: 91.67

round 23, metrics=<sparse_categorical_accuracy=0.9243333339691162,loss=0.24009639024734497>
2.1075 seconds
Tested. Sparse categorical accuracy: 98.33

round 24, metrics=<sparse_categorical_accuracy=0.9156666398048401,loss=0.26322877407073975>
2.1095 seconds
Tested. Sparse categorical accuracy: 98.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
