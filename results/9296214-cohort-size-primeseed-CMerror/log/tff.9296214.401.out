
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:44:30.702189: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  401
2020-07-15 23:44:30.220205

How often each label is chosen for non-IID data
[24, 21, 20, 14, 20, 12, 18, 21, 18, 32]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.0976666659116745,loss=2.3046767711639404>
2.8487 seconds
Tested. Sparse categorical accuracy: 23.33

round  2, metrics=<sparse_categorical_accuracy=0.1456666737794876,loss=2.2964894771575928>
2.1102 seconds
Tested. Sparse categorical accuracy: 21.67

round  3, metrics=<sparse_categorical_accuracy=0.14533333480358124,loss=2.289777994155884>
2.2204 seconds
Tested. Sparse categorical accuracy: 38.33

round  4, metrics=<sparse_categorical_accuracy=0.14666666090488434,loss=2.2767128944396973>
2.1235 seconds
Tested. Sparse categorical accuracy: 18.33

round  5, metrics=<sparse_categorical_accuracy=0.14266666769981384,loss=2.2583184242248535>
2.1850 seconds
Tested. Sparse categorical accuracy: 51.67

round  6, metrics=<sparse_categorical_accuracy=0.22066666185855865,loss=2.1815543174743652>
2.0789 seconds
Tested. Sparse categorical accuracy: 61.67

round  7, metrics=<sparse_categorical_accuracy=0.33500000834465027,loss=2.0234131813049316>
2.1760 seconds
Tested. Sparse categorical accuracy: 60.00

round  8, metrics=<sparse_categorical_accuracy=0.21933333575725555,loss=2.452454090118408>
2.0693 seconds
Tested. Sparse categorical accuracy: 38.33

round  9, metrics=<sparse_categorical_accuracy=0.34566667675971985,loss=2.0898661613464355>
2.0405 seconds
Tested. Sparse categorical accuracy: 70.00

round 10, metrics=<sparse_categorical_accuracy=0.5016666650772095,loss=1.7743980884552002>
2.1689 seconds
Tested. Sparse categorical accuracy: 65.00

round 11, metrics=<sparse_categorical_accuracy=0.3853333294391632,loss=2.1822338104248047>
2.0145 seconds
Tested. Sparse categorical accuracy: 43.33

round 12, metrics=<sparse_categorical_accuracy=0.5103333592414856,loss=1.8996175527572632>
2.1757 seconds
Tested. Sparse categorical accuracy: 76.67

round 13, metrics=<sparse_categorical_accuracy=0.593999981880188,loss=1.6761103868484497>
2.0483 seconds
Tested. Sparse categorical accuracy: 60.00

round 14, metrics=<sparse_categorical_accuracy=0.6693333387374878,loss=1.114177942276001>
2.1576 seconds
Tested. Sparse categorical accuracy: 70.00

round 15, metrics=<sparse_categorical_accuracy=0.7093333601951599,loss=1.0473366975784302>
2.0259 seconds
Tested. Sparse categorical accuracy: 76.67

round 16, metrics=<sparse_categorical_accuracy=0.8273333311080933,loss=0.599969744682312>
2.0242 seconds
Tested. Sparse categorical accuracy: 88.33

round 17, metrics=<sparse_categorical_accuracy=0.7956666946411133,loss=0.8023163080215454>
2.1750 seconds
Tested. Sparse categorical accuracy: 76.67

round 18, metrics=<sparse_categorical_accuracy=0.8629999756813049,loss=0.46733561158180237>
2.0169 seconds
Tested. Sparse categorical accuracy: 88.33

round 19, metrics=<sparse_categorical_accuracy=0.8573333621025085,loss=0.5821259617805481>
2.2479 seconds
Tested. Sparse categorical accuracy: 75.00

round 20, metrics=<sparse_categorical_accuracy=0.8413333296775818,loss=0.6891370415687561>
2.0405 seconds
Tested. Sparse categorical accuracy: 80.00

round 21, metrics=<sparse_categorical_accuracy=0.8830000162124634,loss=0.42505720257759094>
2.0519 seconds
Tested. Sparse categorical accuracy: 90.00

round 22, metrics=<sparse_categorical_accuracy=0.8690000176429749,loss=0.4508605897426605>
2.1376 seconds
Tested. Sparse categorical accuracy: 93.33

round 23, metrics=<sparse_categorical_accuracy=0.8109999895095825,loss=0.6488407254219055>
2.0008 seconds
Tested. Sparse categorical accuracy: 86.67

round 24, metrics=<sparse_categorical_accuracy=0.9146666526794434,loss=0.2928987741470337>
2.0083 seconds
Tested. Sparse categorical accuracy: 90.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
