
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:30:39.784433: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  271
2020-07-15 23:30:39.241400

How often each label is chosen for non-IID data
[17, 15, 28, 16, 17, 24, 17, 19, 30, 17]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.09733333438634872,loss=2.304713726043701>
3.8626 seconds
Tested. Sparse categorical accuracy: 8.33

round  2, metrics=<sparse_categorical_accuracy=0.10466666519641876,loss=2.2930541038513184>
3.1812 seconds
Tested. Sparse categorical accuracy: 13.33

round  3, metrics=<sparse_categorical_accuracy=0.14499999582767487,loss=2.2725961208343506>
3.1027 seconds
Tested. Sparse categorical accuracy: 26.67

round  4, metrics=<sparse_categorical_accuracy=0.164000004529953,loss=2.2316713333129883>
3.1119 seconds
Tested. Sparse categorical accuracy: 26.67

round  5, metrics=<sparse_categorical_accuracy=0.2290000021457672,loss=2.1461660861968994>
3.4283 seconds
Tested. Sparse categorical accuracy: 73.33

round  6, metrics=<sparse_categorical_accuracy=0.3233333230018616,loss=2.203505277633667>
2.8418 seconds
Tested. Sparse categorical accuracy: 38.33

round  7, metrics=<sparse_categorical_accuracy=0.4333333373069763,loss=1.8147333860397339>
3.1998 seconds
Tested. Sparse categorical accuracy: 65.00

round  8, metrics=<sparse_categorical_accuracy=0.2786666750907898,loss=2.6054131984710693>
2.8744 seconds
Tested. Sparse categorical accuracy: 23.33

round  9, metrics=<sparse_categorical_accuracy=0.24633333086967468,loss=2.115812063217163>
3.0196 seconds
Tested. Sparse categorical accuracy: 33.33

round 10, metrics=<sparse_categorical_accuracy=0.4166666567325592,loss=1.7808704376220703>
2.6855 seconds
Tested. Sparse categorical accuracy: 66.67

round 11, metrics=<sparse_categorical_accuracy=0.4463333189487457,loss=1.9827880859375>
3.5752 seconds
Tested. Sparse categorical accuracy: 76.67

round 12, metrics=<sparse_categorical_accuracy=0.5873333215713501,loss=1.371827483177185>
2.9777 seconds
Tested. Sparse categorical accuracy: 90.00

round 13, metrics=<sparse_categorical_accuracy=0.5983333587646484,loss=1.4207123517990112>
2.6046 seconds
Tested. Sparse categorical accuracy: 80.00

round 14, metrics=<sparse_categorical_accuracy=0.6940000057220459,loss=0.9651219844818115>
3.0947 seconds
Tested. Sparse categorical accuracy: 88.33

round 15, metrics=<sparse_categorical_accuracy=0.7636666893959045,loss=0.8234348297119141>
2.6658 seconds
Tested. Sparse categorical accuracy: 78.33

round 16, metrics=<sparse_categorical_accuracy=0.840666651725769,loss=0.542698323726654>
3.0109 seconds
Tested. Sparse categorical accuracy: 88.33

round 17, metrics=<sparse_categorical_accuracy=0.8083333373069763,loss=0.606566309928894>
2.5418 seconds
Tested. Sparse categorical accuracy: 91.67

round 18, metrics=<sparse_categorical_accuracy=0.8843333125114441,loss=0.3957284688949585>
2.7644 seconds
Tested. Sparse categorical accuracy: 80.00

round 19, metrics=<sparse_categorical_accuracy=0.8843333125114441,loss=0.3872150182723999>
3.0793 seconds
Tested. Sparse categorical accuracy: 95.00

round 20, metrics=<sparse_categorical_accuracy=0.8823333382606506,loss=0.39523616433143616>
2.9842 seconds
Tested. Sparse categorical accuracy: 88.33

round 21, metrics=<sparse_categorical_accuracy=0.893666684627533,loss=0.3623970150947571>
2.9644 seconds
Tested. Sparse categorical accuracy: 100.00

round 22, metrics=<sparse_categorical_accuracy=0.9136666655540466,loss=0.2817460596561432>
3.2315 seconds
Tested. Sparse categorical accuracy: 100.00

round 23, metrics=<sparse_categorical_accuracy=0.9196666479110718,loss=0.2667991518974304>
3.1266 seconds
Tested. Sparse categorical accuracy: 93.33

round 24, metrics=<sparse_categorical_accuracy=0.9276666641235352,loss=0.24777504801750183>
3.0355 seconds
Tested. Sparse categorical accuracy: 93.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
