
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:23:14.394408: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  201
2020-07-15 23:23:13.873608

How often each label is chosen for non-IID data
[14, 24, 19, 23, 11, 12, 17, 24, 30, 26]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.09600000083446503,loss=2.3032405376434326>
3.8484 seconds
Tested. Sparse categorical accuracy: 10.00

round  2, metrics=<sparse_categorical_accuracy=0.11800000071525574,loss=2.296940803527832>
2.8366 seconds
Tested. Sparse categorical accuracy: 15.00

round  3, metrics=<sparse_categorical_accuracy=0.13233333826065063,loss=2.290330648422241>
2.9375 seconds
Tested. Sparse categorical accuracy: 8.33

round  4, metrics=<sparse_categorical_accuracy=0.11733333021402359,loss=2.270113468170166>
2.7674 seconds
Tested. Sparse categorical accuracy: 18.33

round  5, metrics=<sparse_categorical_accuracy=0.12600000202655792,loss=2.255620241165161>
2.7950 seconds
Tested. Sparse categorical accuracy: 30.00

round  6, metrics=<sparse_categorical_accuracy=0.36666667461395264,loss=2.2013745307922363>
2.7439 seconds
Tested. Sparse categorical accuracy: 35.00

round  7, metrics=<sparse_categorical_accuracy=0.406333327293396,loss=2.1226420402526855>
3.1174 seconds
Tested. Sparse categorical accuracy: 60.00

round  8, metrics=<sparse_categorical_accuracy=0.4779999852180481,loss=2.6444926261901855>
2.7286 seconds
Tested. Sparse categorical accuracy: 11.67

round  9, metrics=<sparse_categorical_accuracy=0.11566666513681412,loss=2.288062572479248>
2.7354 seconds
Tested. Sparse categorical accuracy: 20.00

round 10, metrics=<sparse_categorical_accuracy=0.24699999392032623,loss=2.2562055587768555>
3.2783 seconds
Tested. Sparse categorical accuracy: 26.67

round 11, metrics=<sparse_categorical_accuracy=0.24766667187213898,loss=2.1872708797454834>
3.2190 seconds
Tested. Sparse categorical accuracy: 45.00

round 12, metrics=<sparse_categorical_accuracy=0.35899999737739563,loss=2.1029410362243652>
2.9024 seconds
Tested. Sparse categorical accuracy: 25.00

round 13, metrics=<sparse_categorical_accuracy=0.382666677236557,loss=1.8197722434997559>
2.7441 seconds
Tested. Sparse categorical accuracy: 55.00

round 14, metrics=<sparse_categorical_accuracy=0.49900001287460327,loss=1.9363638162612915>
2.9672 seconds
Tested. Sparse categorical accuracy: 46.67

round 15, metrics=<sparse_categorical_accuracy=0.5403333306312561,loss=1.6142958402633667>
2.7309 seconds
Tested. Sparse categorical accuracy: 65.00

round 16, metrics=<sparse_categorical_accuracy=0.656333327293396,loss=1.1473228931427002>
2.6221 seconds
Tested. Sparse categorical accuracy: 50.00

round 17, metrics=<sparse_categorical_accuracy=0.7300000190734863,loss=0.8649324774742126>
2.7376 seconds
Tested. Sparse categorical accuracy: 70.00

round 18, metrics=<sparse_categorical_accuracy=0.6539999842643738,loss=1.4804023504257202>
2.7133 seconds
Tested. Sparse categorical accuracy: 63.33

round 19, metrics=<sparse_categorical_accuracy=0.6933333277702332,loss=0.9543655514717102>
2.8400 seconds
Tested. Sparse categorical accuracy: 81.67

round 20, metrics=<sparse_categorical_accuracy=0.8240000009536743,loss=0.5693421363830566>
2.7630 seconds
Tested. Sparse categorical accuracy: 88.33

round 21, metrics=<sparse_categorical_accuracy=0.8516666889190674,loss=0.48778313398361206>
2.4939 seconds
Tested. Sparse categorical accuracy: 85.00

round 22, metrics=<sparse_categorical_accuracy=0.8613333106040955,loss=0.43662646412849426>
2.9761 seconds
Tested. Sparse categorical accuracy: 98.33

round 23, metrics=<sparse_categorical_accuracy=0.8653333187103271,loss=0.4946911334991455>
2.5951 seconds
Tested. Sparse categorical accuracy: 100.00

round 24, metrics=<sparse_categorical_accuracy=0.890333354473114,loss=0.3824431598186493>
2.6622 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
