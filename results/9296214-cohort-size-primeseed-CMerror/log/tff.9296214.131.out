
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:16:04.757180: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  131
2020-07-15 23:16:04.277850

How often each label is chosen for non-IID data
[18, 21, 13, 25, 27, 16, 18, 25, 16, 21]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.1146666631102562,loss=2.300842761993408>
2.9659 seconds
Tested. Sparse categorical accuracy: 11.67

round  2, metrics=<sparse_categorical_accuracy=0.08900000154972076,loss=2.2926394939422607>
2.1734 seconds
Tested. Sparse categorical accuracy: 10.00

round  3, metrics=<sparse_categorical_accuracy=0.14433333277702332,loss=2.270397424697876>
2.2157 seconds
Tested. Sparse categorical accuracy: 36.67

round  4, metrics=<sparse_categorical_accuracy=0.24166665971279144,loss=2.2459335327148438>
2.0733 seconds
Tested. Sparse categorical accuracy: 35.00

round  5, metrics=<sparse_categorical_accuracy=0.30933332443237305,loss=2.1450462341308594>
2.2092 seconds
Tested. Sparse categorical accuracy: 63.33

round  6, metrics=<sparse_categorical_accuracy=0.351666659116745,loss=2.448451280593872>
2.1112 seconds
Tested. Sparse categorical accuracy: 8.33

round  7, metrics=<sparse_categorical_accuracy=0.16033333539962769,loss=2.269831895828247>
2.1678 seconds
Tested. Sparse categorical accuracy: 26.67

round  8, metrics=<sparse_categorical_accuracy=0.28966665267944336,loss=2.1965749263763428>
2.0570 seconds
Tested. Sparse categorical accuracy: 60.00

round  9, metrics=<sparse_categorical_accuracy=0.36500000953674316,loss=2.002739906311035>
2.2277 seconds
Tested. Sparse categorical accuracy: 76.67

round 10, metrics=<sparse_categorical_accuracy=0.4819999933242798,loss=2.3834311962127686>
2.0081 seconds
Tested. Sparse categorical accuracy: 46.67

round 11, metrics=<sparse_categorical_accuracy=0.43966665863990784,loss=1.9948989152908325>
2.1126 seconds
Tested. Sparse categorical accuracy: 66.67

round 12, metrics=<sparse_categorical_accuracy=0.5023333430290222,loss=1.8971866369247437>
2.0421 seconds
Tested. Sparse categorical accuracy: 65.00

round 13, metrics=<sparse_categorical_accuracy=0.6156666874885559,loss=1.315274953842163>
2.1135 seconds
Tested. Sparse categorical accuracy: 86.67

round 14, metrics=<sparse_categorical_accuracy=0.6496666669845581,loss=1.3136054277420044>
2.0371 seconds
Tested. Sparse categorical accuracy: 66.67

round 15, metrics=<sparse_categorical_accuracy=0.6946666836738586,loss=0.9881033301353455>
2.0532 seconds
Tested. Sparse categorical accuracy: 83.33

round 16, metrics=<sparse_categorical_accuracy=0.731333315372467,loss=0.9852342009544373>
2.1894 seconds
Tested. Sparse categorical accuracy: 83.33

round 17, metrics=<sparse_categorical_accuracy=0.8149999976158142,loss=0.6154758930206299>
1.9991 seconds
Tested. Sparse categorical accuracy: 88.33

round 18, metrics=<sparse_categorical_accuracy=0.8413333296775818,loss=0.5964730381965637>
2.0397 seconds
Tested. Sparse categorical accuracy: 83.33

round 19, metrics=<sparse_categorical_accuracy=0.8413333296775818,loss=0.5699244141578674>
2.1866 seconds
Tested. Sparse categorical accuracy: 86.67

round 20, metrics=<sparse_categorical_accuracy=0.8709999918937683,loss=0.4416382610797882>
2.0288 seconds
Tested. Sparse categorical accuracy: 95.00

round 21, metrics=<sparse_categorical_accuracy=0.9053333401679993,loss=0.3474881052970886>
2.1723 seconds
Tested. Sparse categorical accuracy: 93.33

round 22, metrics=<sparse_categorical_accuracy=0.9049999713897705,loss=0.3365170955657959>
1.9681 seconds
Tested. Sparse categorical accuracy: 90.00

round 23, metrics=<sparse_categorical_accuracy=0.8989999890327454,loss=0.3343377113342285>
2.0641 seconds
Tested. Sparse categorical accuracy: 93.33

round 24, metrics=<sparse_categorical_accuracy=0.9126666784286499,loss=0.2815491855144501>
2.1298 seconds
Tested. Sparse categorical accuracy: 86.67

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
