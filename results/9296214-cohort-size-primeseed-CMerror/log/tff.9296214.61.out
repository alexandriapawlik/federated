
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:09:28.201935: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  61
2020-07-15 23:09:27.714650

How often each label is chosen for non-IID data
[17, 21, 19, 22, 16, 23, 21, 18, 18, 25]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.11966666579246521,loss=2.3029966354370117>
3.0128 seconds
Tested. Sparse categorical accuracy: 13.33

round  2, metrics=<sparse_categorical_accuracy=0.09666666388511658,loss=2.2971599102020264>
2.2242 seconds
Tested. Sparse categorical accuracy: 25.00

round  3, metrics=<sparse_categorical_accuracy=0.1886666715145111,loss=2.282395124435425>
2.4063 seconds
Tested. Sparse categorical accuracy: 36.67

round  4, metrics=<sparse_categorical_accuracy=0.19300000369548798,loss=2.256145477294922>
2.2020 seconds
Tested. Sparse categorical accuracy: 50.00

round  5, metrics=<sparse_categorical_accuracy=0.2939999997615814,loss=2.184889793395996>
2.3210 seconds
Tested. Sparse categorical accuracy: 41.67

round  6, metrics=<sparse_categorical_accuracy=0.2863333225250244,loss=2.1740639209747314>
2.1831 seconds
Tested. Sparse categorical accuracy: 35.00

round  7, metrics=<sparse_categorical_accuracy=0.40400001406669617,loss=1.9829418659210205>
2.3042 seconds
Tested. Sparse categorical accuracy: 58.33

round  8, metrics=<sparse_categorical_accuracy=0.4403333365917206,loss=2.1467092037200928>
2.1392 seconds
Tested. Sparse categorical accuracy: 56.67

round  9, metrics=<sparse_categorical_accuracy=0.5133333206176758,loss=1.8752899169921875>
2.1368 seconds
Tested. Sparse categorical accuracy: 66.67

round 10, metrics=<sparse_categorical_accuracy=0.5389999747276306,loss=1.6455711126327515>
2.2901 seconds
Tested. Sparse categorical accuracy: 52.50

round 11, metrics=<sparse_categorical_accuracy=0.534333348274231,loss=1.4550443887710571>
2.1356 seconds
Tested. Sparse categorical accuracy: 71.67

round 12, metrics=<sparse_categorical_accuracy=0.668666660785675,loss=1.334102988243103>
2.2656 seconds
Tested. Sparse categorical accuracy: 73.33

round 13, metrics=<sparse_categorical_accuracy=0.7153333425521851,loss=0.8903279900550842>
2.1138 seconds
Tested. Sparse categorical accuracy: 91.67

round 14, metrics=<sparse_categorical_accuracy=0.7523333430290222,loss=0.8475775718688965>
2.2775 seconds
Tested. Sparse categorical accuracy: 81.67

round 15, metrics=<sparse_categorical_accuracy=0.8349999785423279,loss=0.5967670679092407>
2.0870 seconds
Tested. Sparse categorical accuracy: 85.00

round 16, metrics=<sparse_categorical_accuracy=0.8489999771118164,loss=0.5461800694465637>
2.1634 seconds
Tested. Sparse categorical accuracy: 90.00

round 17, metrics=<sparse_categorical_accuracy=0.8473333120346069,loss=0.5497624278068542>
2.2596 seconds
Tested. Sparse categorical accuracy: 95.00

round 18, metrics=<sparse_categorical_accuracy=0.8826666474342346,loss=0.4087194800376892>
2.1135 seconds
Tested. Sparse categorical accuracy: 85.00

round 19, metrics=<sparse_categorical_accuracy=0.9146666526794434,loss=0.30914196372032166>
2.1585 seconds
Tested. Sparse categorical accuracy: 100.00

round 20, metrics=<sparse_categorical_accuracy=0.9070000052452087,loss=0.3228733241558075>
2.3120 seconds
Tested. Sparse categorical accuracy: 98.33

round 21, metrics=<sparse_categorical_accuracy=0.8980000019073486,loss=0.3408219516277313>
2.1203 seconds
Tested. Sparse categorical accuracy: 100.00

round 22, metrics=<sparse_categorical_accuracy=0.9203333258628845,loss=0.2861151099205017>
2.1018 seconds
Tested. Sparse categorical accuracy: 93.33

round 23, metrics=<sparse_categorical_accuracy=0.9169999957084656,loss=0.2717820107936859>
2.2735 seconds
Tested. Sparse categorical accuracy: 96.67

round 24, metrics=<sparse_categorical_accuracy=0.9206666946411133,loss=0.26028913259506226>
2.0926 seconds
Tested. Sparse categorical accuracy: 93.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
