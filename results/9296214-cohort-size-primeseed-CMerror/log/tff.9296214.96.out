
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:12:43.239199: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  96
2020-07-15 23:12:42.756232

How often each label is chosen for non-IID data
[21, 28, 23, 15, 21, 16, 19, 22, 20, 15]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.11533333361148834,loss=2.3024160861968994>
2.8551 seconds
Tested. Sparse categorical accuracy: 5.00

round  2, metrics=<sparse_categorical_accuracy=0.140666663646698,loss=2.2875473499298096>
2.1160 seconds
Tested. Sparse categorical accuracy: 6.67

round  3, metrics=<sparse_categorical_accuracy=0.24400000274181366,loss=2.2658612728118896>
2.1988 seconds
Tested. Sparse categorical accuracy: 38.33

round  4, metrics=<sparse_categorical_accuracy=0.2383333295583725,loss=2.2268970012664795>
2.1211 seconds
Tested. Sparse categorical accuracy: 55.00

round  5, metrics=<sparse_categorical_accuracy=0.39933332800865173,loss=2.298413038253784>
2.2235 seconds
Tested. Sparse categorical accuracy: 13.33

round  6, metrics=<sparse_categorical_accuracy=0.312333345413208,loss=2.212082624435425>
2.0629 seconds
Tested. Sparse categorical accuracy: 40.00

round  7, metrics=<sparse_categorical_accuracy=0.4363333284854889,loss=2.113386869430542>
2.1963 seconds
Tested. Sparse categorical accuracy: 50.00

round  8, metrics=<sparse_categorical_accuracy=0.528333306312561,loss=1.8700178861618042>
2.0160 seconds
Tested. Sparse categorical accuracy: 76.67

round  9, metrics=<sparse_categorical_accuracy=0.6069999933242798,loss=1.806687831878662>
2.1683 seconds
Tested. Sparse categorical accuracy: 58.33

round 10, metrics=<sparse_categorical_accuracy=0.5613333582878113,loss=1.6209700107574463>
1.9888 seconds
Tested. Sparse categorical accuracy: 73.33

round 11, metrics=<sparse_categorical_accuracy=0.6690000295639038,loss=1.2215758562088013>
2.1437 seconds
Tested. Sparse categorical accuracy: 65.00

round 12, metrics=<sparse_categorical_accuracy=0.7053333520889282,loss=0.9520576000213623>
2.0304 seconds
Tested. Sparse categorical accuracy: 73.33

round 13, metrics=<sparse_categorical_accuracy=0.7876666784286499,loss=0.8099309802055359>
2.0082 seconds
Tested. Sparse categorical accuracy: 76.67

round 14, metrics=<sparse_categorical_accuracy=0.828000009059906,loss=0.6124421954154968>
2.1285 seconds
Tested. Sparse categorical accuracy: 75.00

round 15, metrics=<sparse_categorical_accuracy=0.8650000095367432,loss=0.48791199922561646>
2.0200 seconds
Tested. Sparse categorical accuracy: 85.00

round 16, metrics=<sparse_categorical_accuracy=0.8453333377838135,loss=0.567399263381958>
1.9869 seconds
Tested. Sparse categorical accuracy: 95.00

round 17, metrics=<sparse_categorical_accuracy=0.8963333368301392,loss=0.3779597878456116>
2.1567 seconds
Tested. Sparse categorical accuracy: 88.33

round 18, metrics=<sparse_categorical_accuracy=0.8893333077430725,loss=0.3664170205593109>
2.0405 seconds
Tested. Sparse categorical accuracy: 88.33

round 19, metrics=<sparse_categorical_accuracy=0.921999990940094,loss=0.2921142578125>
2.1949 seconds
Tested. Sparse categorical accuracy: 90.00

round 20, metrics=<sparse_categorical_accuracy=0.9153333306312561,loss=0.27099722623825073>
1.9956 seconds
Tested. Sparse categorical accuracy: 85.00

round 21, metrics=<sparse_categorical_accuracy=0.9176666736602783,loss=0.2758270800113678>
1.9907 seconds
Tested. Sparse categorical accuracy: 95.00

round 22, metrics=<sparse_categorical_accuracy=0.918666660785675,loss=0.2754737138748169>
2.2174 seconds
Tested. Sparse categorical accuracy: 93.33

round 23, metrics=<sparse_categorical_accuracy=0.9253333210945129,loss=0.24742092192173004>
2.0170 seconds
Tested. Sparse categorical accuracy: 90.00

round 24, metrics=<sparse_categorical_accuracy=0.9283333420753479,loss=0.22799381613731384>
1.9778 seconds
Tested. Sparse categorical accuracy: 96.67

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
