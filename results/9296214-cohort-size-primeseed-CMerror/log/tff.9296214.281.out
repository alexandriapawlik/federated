
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:31:41.746884: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  281
2020-07-15 23:31:41.255543

How often each label is chosen for non-IID data
[23, 24, 17, 23, 17, 18, 24, 20, 15, 19]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.09366666525602341,loss=2.302419424057007>
3.6268 seconds
Tested. Sparse categorical accuracy: 25.00

round  2, metrics=<sparse_categorical_accuracy=0.12666666507720947,loss=2.2880959510803223>
2.6618 seconds
Tested. Sparse categorical accuracy: 8.33

round  3, metrics=<sparse_categorical_accuracy=0.10533333569765091,loss=2.272526741027832>
2.7351 seconds
Tested. Sparse categorical accuracy: 23.33

round  4, metrics=<sparse_categorical_accuracy=0.15033333003520966,loss=2.227098226547241>
2.5954 seconds
Tested. Sparse categorical accuracy: 6.67

round  5, metrics=<sparse_categorical_accuracy=0.29733332991600037,loss=2.174551010131836>
2.7200 seconds
Tested. Sparse categorical accuracy: 25.00

round  6, metrics=<sparse_categorical_accuracy=0.4726666808128357,loss=1.9293626546859741>
2.5287 seconds
Tested. Sparse categorical accuracy: 45.00

round  7, metrics=<sparse_categorical_accuracy=0.24533332884311676,loss=2.504408597946167>
2.6044 seconds
Tested. Sparse categorical accuracy: 25.00

round  8, metrics=<sparse_categorical_accuracy=0.26899999380111694,loss=2.243828773498535>
2.5651 seconds
Tested. Sparse categorical accuracy: 43.33

round  9, metrics=<sparse_categorical_accuracy=0.42533332109451294,loss=2.0502030849456787>
2.7408 seconds
Tested. Sparse categorical accuracy: 50.00

round 10, metrics=<sparse_categorical_accuracy=0.39933332800865173,loss=2.2147223949432373>
2.4403 seconds
Tested. Sparse categorical accuracy: 36.67

round 11, metrics=<sparse_categorical_accuracy=0.41733333468437195,loss=1.8737561702728271>
2.5136 seconds
Tested. Sparse categorical accuracy: 51.67

round 12, metrics=<sparse_categorical_accuracy=0.46033334732055664,loss=1.7006794214248657>
2.7095 seconds
Tested. Sparse categorical accuracy: 63.33

round 13, metrics=<sparse_categorical_accuracy=0.6549999713897705,loss=1.1088850498199463>
2.5049 seconds
Tested. Sparse categorical accuracy: 75.00

round 14, metrics=<sparse_categorical_accuracy=0.6916666626930237,loss=1.1505402326583862>
2.4382 seconds
Tested. Sparse categorical accuracy: 80.00

round 15, metrics=<sparse_categorical_accuracy=0.7633333206176758,loss=0.7394869923591614>
2.2519 seconds
Tested. Sparse categorical accuracy: 78.33

round 16, metrics=<sparse_categorical_accuracy=0.7429999709129333,loss=0.957166314125061>
2.1655 seconds
Tested. Sparse categorical accuracy: 71.67

round 17, metrics=<sparse_categorical_accuracy=0.812333345413208,loss=0.6299892067909241>
2.4726 seconds
Tested. Sparse categorical accuracy: 86.67

round 18, metrics=<sparse_categorical_accuracy=0.8383333086967468,loss=0.6592983603477478>
2.4259 seconds
Tested. Sparse categorical accuracy: 83.33

round 19, metrics=<sparse_categorical_accuracy=0.8306666612625122,loss=0.6356812119483948>
2.4522 seconds
Tested. Sparse categorical accuracy: 93.33

round 20, metrics=<sparse_categorical_accuracy=0.9076666831970215,loss=0.3530047535896301>
2.6259 seconds
Tested. Sparse categorical accuracy: 88.33

round 21, metrics=<sparse_categorical_accuracy=0.8946666717529297,loss=0.34650641679763794>
2.4609 seconds
Tested. Sparse categorical accuracy: 93.33

round 22, metrics=<sparse_categorical_accuracy=0.9190000295639038,loss=0.2728605270385742>
2.7009 seconds
Tested. Sparse categorical accuracy: 96.67

round 23, metrics=<sparse_categorical_accuracy=0.9010000228881836,loss=0.38377729058265686>
2.4739 seconds
Tested. Sparse categorical accuracy: 96.67

round 24, metrics=<sparse_categorical_accuracy=0.9020000100135803,loss=0.34614241123199463>
2.4868 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
