
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:18:22.057692: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  151
2020-07-15 23:18:21.560959

How often each label is chosen for non-IID data
[20, 16, 24, 26, 20, 19, 15, 18, 20, 22]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.08633333444595337,loss=2.3014652729034424>
2.9090 seconds
Tested. Sparse categorical accuracy: 16.67

round  2, metrics=<sparse_categorical_accuracy=0.1353333294391632,loss=2.2947840690612793>
2.2828 seconds
Tested. Sparse categorical accuracy: 13.33

round  3, metrics=<sparse_categorical_accuracy=0.12300000339746475,loss=2.2871270179748535>
2.2793 seconds
Tested. Sparse categorical accuracy: 15.00

round  4, metrics=<sparse_categorical_accuracy=0.1433333307504654,loss=2.264054775238037>
2.2270 seconds
Tested. Sparse categorical accuracy: 8.33

round  5, metrics=<sparse_categorical_accuracy=0.11166666448116302,loss=2.229949474334717>
2.2756 seconds
Tested. Sparse categorical accuracy: 18.33

round  6, metrics=<sparse_categorical_accuracy=0.2906666696071625,loss=2.1590538024902344>
2.2096 seconds
Tested. Sparse categorical accuracy: 51.67

round  7, metrics=<sparse_categorical_accuracy=0.4556666612625122,loss=2.2197835445404053>
2.3728 seconds
Tested. Sparse categorical accuracy: 46.67

round  8, metrics=<sparse_categorical_accuracy=0.476666659116745,loss=2.0460562705993652>
2.1246 seconds
Tested. Sparse categorical accuracy: 55.00

round  9, metrics=<sparse_categorical_accuracy=0.44566667079925537,loss=1.912367343902588>
2.2568 seconds
Tested. Sparse categorical accuracy: 43.33

round 10, metrics=<sparse_categorical_accuracy=0.5009999871253967,loss=1.791899561882019>
2.0312 seconds
Tested. Sparse categorical accuracy: 53.33

round 11, metrics=<sparse_categorical_accuracy=0.5706666707992554,loss=1.579447865486145>
2.0196 seconds
Tested. Sparse categorical accuracy: 75.00

round 12, metrics=<sparse_categorical_accuracy=0.687666654586792,loss=1.1238065958023071>
2.1710 seconds
Tested. Sparse categorical accuracy: 91.67

round 13, metrics=<sparse_categorical_accuracy=0.718999981880188,loss=1.092580795288086>
2.1425 seconds
Tested. Sparse categorical accuracy: 65.00

round 14, metrics=<sparse_categorical_accuracy=0.7099999785423279,loss=0.9055047035217285>
2.2839 seconds
Tested. Sparse categorical accuracy: 68.33

round 15, metrics=<sparse_categorical_accuracy=0.8136666417121887,loss=0.5878546833992004>
2.1590 seconds
Tested. Sparse categorical accuracy: 90.00

round 16, metrics=<sparse_categorical_accuracy=0.7713333368301392,loss=0.8329508304595947>
2.1235 seconds
Tested. Sparse categorical accuracy: 96.67

round 17, metrics=<sparse_categorical_accuracy=0.8399999737739563,loss=0.5182362198829651>
2.2794 seconds
Tested. Sparse categorical accuracy: 93.33

round 18, metrics=<sparse_categorical_accuracy=0.875333309173584,loss=0.43771350383758545>
2.1885 seconds
Tested. Sparse categorical accuracy: 98.33

round 19, metrics=<sparse_categorical_accuracy=0.8769999742507935,loss=0.42339763045310974>
2.0370 seconds
Tested. Sparse categorical accuracy: 90.00

round 20, metrics=<sparse_categorical_accuracy=0.9143333435058594,loss=0.31818777322769165>
2.4217 seconds
Tested. Sparse categorical accuracy: 100.00

round 21, metrics=<sparse_categorical_accuracy=0.8360000252723694,loss=0.5823930501937866>
2.1143 seconds
Tested. Sparse categorical accuracy: 83.33

round 22, metrics=<sparse_categorical_accuracy=0.893666684627533,loss=0.3540579378604889>
2.1558 seconds
Tested. Sparse categorical accuracy: 90.00

round 23, metrics=<sparse_categorical_accuracy=0.9096666574478149,loss=0.279948353767395>
2.2892 seconds
Tested. Sparse categorical accuracy: 88.33

round 24, metrics=<sparse_categorical_accuracy=0.9276666641235352,loss=0.23341096937656403>
2.1096 seconds
Tested. Sparse categorical accuracy: 83.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
