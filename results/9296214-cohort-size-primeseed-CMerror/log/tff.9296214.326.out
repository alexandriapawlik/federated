
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:36:34.777632: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  326
2020-07-15 23:36:34.290326

How often each label is chosen for non-IID data
[20, 18, 26, 18, 14, 19, 19, 20, 21, 25]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.09099999815225601,loss=2.3004348278045654>
3.0122 seconds
Tested. Sparse categorical accuracy: 16.67

round  2, metrics=<sparse_categorical_accuracy=0.14300000667572021,loss=2.288998603820801>
2.3433 seconds
Tested. Sparse categorical accuracy: 35.00

round  3, metrics=<sparse_categorical_accuracy=0.16433332860469818,loss=2.2741055488586426>
2.2241 seconds
Tested. Sparse categorical accuracy: 16.67

round  4, metrics=<sparse_categorical_accuracy=0.1420000046491623,loss=2.240877389907837>
2.3025 seconds
Tested. Sparse categorical accuracy: 43.33

round  5, metrics=<sparse_categorical_accuracy=0.28833332657814026,loss=2.1641178131103516>
2.3208 seconds
Tested. Sparse categorical accuracy: 58.33

round  6, metrics=<sparse_categorical_accuracy=0.4286666810512543,loss=2.3712947368621826>
2.1106 seconds
Tested. Sparse categorical accuracy: 30.00

round  7, metrics=<sparse_categorical_accuracy=0.3149999976158142,loss=2.224769115447998>
2.2615 seconds
Tested. Sparse categorical accuracy: 55.00

round  8, metrics=<sparse_categorical_accuracy=0.4596666693687439,loss=2.038585901260376>
2.1404 seconds
Tested. Sparse categorical accuracy: 56.67

round  9, metrics=<sparse_categorical_accuracy=0.5046666860580444,loss=1.9083701372146606>
2.2937 seconds
Tested. Sparse categorical accuracy: 65.00

round 10, metrics=<sparse_categorical_accuracy=0.6103333234786987,loss=1.6491905450820923>
2.0962 seconds
Tested. Sparse categorical accuracy: 58.33

round 11, metrics=<sparse_categorical_accuracy=0.6423333287239075,loss=1.2612613439559937>
2.3521 seconds
Tested. Sparse categorical accuracy: 86.67

round 12, metrics=<sparse_categorical_accuracy=0.6673333048820496,loss=1.194456696510315>
2.1608 seconds
Tested. Sparse categorical accuracy: 61.67

round 13, metrics=<sparse_categorical_accuracy=0.7689999938011169,loss=0.8196601271629333>
2.2858 seconds
Tested. Sparse categorical accuracy: 83.33

round 14, metrics=<sparse_categorical_accuracy=0.8113333582878113,loss=0.7257834672927856>
2.1721 seconds
Tested. Sparse categorical accuracy: 91.67

round 15, metrics=<sparse_categorical_accuracy=0.8326666951179504,loss=0.5976085066795349>
2.1622 seconds
Tested. Sparse categorical accuracy: 86.67

round 16, metrics=<sparse_categorical_accuracy=0.8539999723434448,loss=0.5042160153388977>
2.3883 seconds
Tested. Sparse categorical accuracy: 86.67

round 17, metrics=<sparse_categorical_accuracy=0.8709999918937683,loss=0.4223424792289734>
2.1134 seconds
Tested. Sparse categorical accuracy: 96.67

round 18, metrics=<sparse_categorical_accuracy=0.9193333387374878,loss=0.27713826298713684>
2.0420 seconds
Tested. Sparse categorical accuracy: 93.33

round 19, metrics=<sparse_categorical_accuracy=0.8786666393280029,loss=0.4341135621070862>
2.3013 seconds
Tested. Sparse categorical accuracy: 95.00

round 20, metrics=<sparse_categorical_accuracy=0.9240000247955322,loss=0.2908296585083008>
2.1227 seconds
Tested. Sparse categorical accuracy: 91.67

round 21, metrics=<sparse_categorical_accuracy=0.9129999876022339,loss=0.2963280975818634>
2.3041 seconds
Tested. Sparse categorical accuracy: 88.33

round 22, metrics=<sparse_categorical_accuracy=0.9146666526794434,loss=0.28772225975990295>
2.1309 seconds
Tested. Sparse categorical accuracy: 93.33

round 23, metrics=<sparse_categorical_accuracy=0.9336666464805603,loss=0.24090096354484558>
2.0702 seconds
Tested. Sparse categorical accuracy: 98.33

round 24, metrics=<sparse_categorical_accuracy=0.9290000200271606,loss=0.2455539107322693>
2.4976 seconds
Tested. Sparse categorical accuracy: 95.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
