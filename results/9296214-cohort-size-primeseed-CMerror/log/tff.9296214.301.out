
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:33:41.803957: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  301
2020-07-15 23:33:41.258916

How often each label is chosen for non-IID data
[18, 13, 15, 22, 21, 18, 28, 22, 23, 20]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.07699999958276749,loss=2.303373098373413>
3.6339 seconds
Tested. Sparse categorical accuracy: 15.00

round  2, metrics=<sparse_categorical_accuracy=0.09000000357627869,loss=2.2960941791534424>
2.5912 seconds
Tested. Sparse categorical accuracy: 20.00

round  3, metrics=<sparse_categorical_accuracy=0.11766666918992996,loss=2.2852046489715576>
3.1207 seconds
Tested. Sparse categorical accuracy: 30.00

round  4, metrics=<sparse_categorical_accuracy=0.17766666412353516,loss=2.255915641784668>
2.8409 seconds
Tested. Sparse categorical accuracy: 26.67

round  5, metrics=<sparse_categorical_accuracy=0.19699999690055847,loss=2.168273448944092>
3.0086 seconds
Tested. Sparse categorical accuracy: 16.67

round  6, metrics=<sparse_categorical_accuracy=0.32866665720939636,loss=2.1600914001464844>
2.8267 seconds
Tested. Sparse categorical accuracy: 38.33

round  7, metrics=<sparse_categorical_accuracy=0.5289999842643738,loss=1.790872573852539>
2.9357 seconds
Tested. Sparse categorical accuracy: 31.67

round  8, metrics=<sparse_categorical_accuracy=0.4326666593551636,loss=2.1231651306152344>
2.8828 seconds
Tested. Sparse categorical accuracy: 38.33

round  9, metrics=<sparse_categorical_accuracy=0.5353333353996277,loss=1.4532502889633179>
3.3344 seconds
Tested. Sparse categorical accuracy: 66.67

round 10, metrics=<sparse_categorical_accuracy=0.562333345413208,loss=1.9018657207489014>
2.8790 seconds
Tested. Sparse categorical accuracy: 61.67

round 11, metrics=<sparse_categorical_accuracy=0.659333348274231,loss=1.1716570854187012>
3.3944 seconds
Tested. Sparse categorical accuracy: 68.33

round 12, metrics=<sparse_categorical_accuracy=0.762333333492279,loss=0.8213456869125366>
2.7964 seconds
Tested. Sparse categorical accuracy: 76.67

round 13, metrics=<sparse_categorical_accuracy=0.8046666383743286,loss=0.708540678024292>
2.5540 seconds
Tested. Sparse categorical accuracy: 95.00

round 14, metrics=<sparse_categorical_accuracy=0.8019999861717224,loss=0.7365984916687012>
3.2108 seconds
Tested. Sparse categorical accuracy: 90.00

round 15, metrics=<sparse_categorical_accuracy=0.843999981880188,loss=0.5319539904594421>
2.9114 seconds
Tested. Sparse categorical accuracy: 80.00

round 16, metrics=<sparse_categorical_accuracy=0.862333357334137,loss=0.45338988304138184>
2.9148 seconds
Tested. Sparse categorical accuracy: 90.00

round 17, metrics=<sparse_categorical_accuracy=0.8693333268165588,loss=0.4734903872013092>
2.7650 seconds
Tested. Sparse categorical accuracy: 85.00

round 18, metrics=<sparse_categorical_accuracy=0.8510000109672546,loss=0.53428715467453>
2.8249 seconds
Tested. Sparse categorical accuracy: 95.00

round 19, metrics=<sparse_categorical_accuracy=0.9053333401679993,loss=0.31983745098114014>
2.8445 seconds
Tested. Sparse categorical accuracy: 93.33

round 20, metrics=<sparse_categorical_accuracy=0.9136666655540466,loss=0.31099840998649597>
2.7631 seconds
Tested. Sparse categorical accuracy: 91.67

round 21, metrics=<sparse_categorical_accuracy=0.9113333225250244,loss=0.305775910615921>
2.8333 seconds
Tested. Sparse categorical accuracy: 95.00

round 22, metrics=<sparse_categorical_accuracy=0.9056666493415833,loss=0.30309614539146423>
2.8168 seconds
Tested. Sparse categorical accuracy: 100.00

round 23, metrics=<sparse_categorical_accuracy=0.9346666932106018,loss=0.23107953369617462>
2.7713 seconds
Tested. Sparse categorical accuracy: 98.33

round 24, metrics=<sparse_categorical_accuracy=0.9380000233650208,loss=0.2249765247106552>
2.7851 seconds
Tested. Sparse categorical accuracy: 100.00

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
