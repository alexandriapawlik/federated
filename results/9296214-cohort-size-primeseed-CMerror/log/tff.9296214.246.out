
TENSORFLOW USERS:
You must use the python3.6-anaconda/5.2.0 module to run TensorFlow.
See https://arc-ts.umich.edu/greatlakes/software/tensorflow for more
information.



The following have been reloaded with a version change:
  1) cuda/10.0.130 => cuda/10.1.105


Currently Loaded Modules:
  1) python3.7-anaconda/2019.07   2) cudnn/10.0-v7.6   3) cuda/10.1.105

 

mkdir: cannot create directory ‘results/9296214’: File exists
mkdir: cannot create directory ‘results/9296214/log’: File exists
2020-07-15 23:27:41.136950: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: UNKNOWN ERROR (303)
Test  246
2020-07-15 23:27:40.572357

How often each label is chosen for non-IID data
[23, 26, 20, 14, 18, 15, 25, 19, 21, 19]

Schema 1: Each client partially IID
--------------------------------------------------
percent data distributed IID:  80
number of classes for non-IID data:  2
data points per client (mean, std dev): ( 600 ,  0 )
--------------------------------------------------
round  1, metrics=<sparse_categorical_accuracy=0.10199999809265137,loss=2.302855968475342>
3.7968 seconds
Tested. Sparse categorical accuracy: 20.00

round  2, metrics=<sparse_categorical_accuracy=0.15033333003520966,loss=2.291797161102295>
2.9798 seconds
Tested. Sparse categorical accuracy: 48.33

round  3, metrics=<sparse_categorical_accuracy=0.23233333230018616,loss=2.276210069656372>
3.3448 seconds
Tested. Sparse categorical accuracy: 38.33

round  4, metrics=<sparse_categorical_accuracy=0.265666663646698,loss=2.2256641387939453>
2.9238 seconds
Tested. Sparse categorical accuracy: 51.67

round  5, metrics=<sparse_categorical_accuracy=0.3293333351612091,loss=2.141688108444214>
3.1933 seconds
Tested. Sparse categorical accuracy: 43.33

round  6, metrics=<sparse_categorical_accuracy=0.29100000858306885,loss=2.231372833251953>
2.6125 seconds
Tested. Sparse categorical accuracy: 55.00

round  7, metrics=<sparse_categorical_accuracy=0.4793333411216736,loss=2.024279832839966>
3.0473 seconds
Tested. Sparse categorical accuracy: 60.00

round  8, metrics=<sparse_categorical_accuracy=0.40566667914390564,loss=2.2074506282806396>
2.9580 seconds
Tested. Sparse categorical accuracy: 36.67

round  9, metrics=<sparse_categorical_accuracy=0.4073333442211151,loss=1.933221459388733>
3.2789 seconds
Tested. Sparse categorical accuracy: 63.33

round 10, metrics=<sparse_categorical_accuracy=0.4703333377838135,loss=2.051490306854248>
2.9990 seconds
Tested. Sparse categorical accuracy: 61.67

round 11, metrics=<sparse_categorical_accuracy=0.5686666369438171,loss=1.5740725994110107>
2.7031 seconds
Tested. Sparse categorical accuracy: 68.33

round 12, metrics=<sparse_categorical_accuracy=0.5923333168029785,loss=1.494515299797058>
2.9338 seconds
Tested. Sparse categorical accuracy: 63.33

round 13, metrics=<sparse_categorical_accuracy=0.7066666483879089,loss=0.9472507238388062>
2.7744 seconds
Tested. Sparse categorical accuracy: 65.00

round 14, metrics=<sparse_categorical_accuracy=0.6846666932106018,loss=1.1881790161132812>
3.0963 seconds
Tested. Sparse categorical accuracy: 71.67

round 15, metrics=<sparse_categorical_accuracy=0.8169999718666077,loss=0.7097591757774353>
2.9756 seconds
Tested. Sparse categorical accuracy: 85.00

round 16, metrics=<sparse_categorical_accuracy=0.8496666550636292,loss=0.5244798064231873>
2.7219 seconds
Tested. Sparse categorical accuracy: 76.67

round 17, metrics=<sparse_categorical_accuracy=0.8196666836738586,loss=0.6720203161239624>
3.1657 seconds
Tested. Sparse categorical accuracy: 85.00

round 18, metrics=<sparse_categorical_accuracy=0.8259999752044678,loss=0.5649732351303101>
2.8958 seconds
Tested. Sparse categorical accuracy: 88.33

round 19, metrics=<sparse_categorical_accuracy=0.8726666569709778,loss=0.4633229970932007>
2.8705 seconds
Tested. Sparse categorical accuracy: 95.00

round 20, metrics=<sparse_categorical_accuracy=0.9053333401679993,loss=0.32036498188972473>
2.8677 seconds
Tested. Sparse categorical accuracy: 100.00

round 21, metrics=<sparse_categorical_accuracy=0.9039999842643738,loss=0.30688226222991943>
2.8363 seconds
Tested. Sparse categorical accuracy: 95.00

round 22, metrics=<sparse_categorical_accuracy=0.921999990940094,loss=0.2746162414550781>
3.2591 seconds
Tested. Sparse categorical accuracy: 96.67

round 23, metrics=<sparse_categorical_accuracy=0.9196666479110718,loss=0.27771973609924316>
2.8786 seconds
Tested. Sparse categorical accuracy: 95.00

round 24, metrics=<sparse_categorical_accuracy=0.9179999828338623,loss=0.2622727155685425>
2.9101 seconds
Tested. Sparse categorical accuracy: 98.33

Final confusion matrix
Traceback (most recent call last):
  File "R_tff_main.py", line 28, in <module>
    p1.go(test, batch)
  File "/home/apawlik/federated/R_1_each_client_partially_iid.py", line 208, in go
    self.train(num, batch, 1)
  File "/home/apawlik/federated/R_partitioner.py", line 320, in train
    print(confusion_matrix(actuals, preds, labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 253, in confusion_matrix
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/metrics/classification.py", line 71, in _check_targets
    check_consistent_length(y_true, y_pred)
  File "/sw/arcts/centos7/python3.7-anaconda/2019.07/lib/python3.7/site-packages/sklearn/utils/validation.py", line 205, in check_consistent_length
    " samples: %r" % [int(l) for l in lengths])
ValueError: Found input variables with inconsistent numbers of samples: [10000, 60]
